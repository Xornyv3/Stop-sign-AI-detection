/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 03.05.2024 19:55:53

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238592;
#else
constexpr int kTensorArenaSize = 237568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 31466, -33843, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00015765269927214831, 0.00014518834359478205, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 38,-49,-60,127,-88,10,-23,45,105,-2,-58,-34,-31,59,-38,15,117,-75,-15,-64,103,71,67,-76,-83,-95,-34,65,22,-88,-15,81, 
  /* [1][0][][] */ 64,85,85,-67,-73,76,-12,22,-35,-15,47,119,127,50,33,-3,-41,14,-62,-103,-78,43,35,121,96,81,-54,-2,101,-114,-109,-14, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0037257832009345293, 0.003431214950978756, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 605, 509, 547, -115, -613, 225, -273, 484, -497, -199, 533, 495, 512, 495, -493, -430, -440, -337, -328, -10, -494, 566, 298, 489, 438, 412, -37, -445, -219, -331, -213, -337, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.2955896535422653e-05, 5.4501208069268614e-05, 5.2899998991051689e-05, 5.2364965085871518e-05, 5.187940041651018e-05, 5.9326208429411054e-05, 5.1855768106179312e-05, 5.9724567108787596e-05, 5.6170236348407343e-05, 5.1847895520040765e-05, 5.5198688642121851e-05, 5.7025899877771735e-05, 5.5790726037230343e-05, 5.7400971854804084e-05, 5.4116077080834657e-05, 4.9592341383686289e-05, 5.1834627811331302e-05, 6.1687314882874489e-05, 5.1791226724162698e-05, 5.2933275583200157e-05, 4.8257505113724619e-05, 5.148389027453959e-05, 5.7717814343050122e-05, 5.6928642152342945e-05, 5.5262360547203571e-05, 5.665895514539443e-05, 5.4302003263728693e-05, 5.398083885665983e-05, 5.8320641983300447e-05, 5.1820592489093542e-05, 5.2997598686488345e-05, 5.1361894293222576e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -35,-36,125,22,110,-3,-108,-94,61,-84,-124,-7,70,-8,-23,66,-52,-44,-70,-51,-59,-102,5,112,-99,-5,92,-35,127,11,-38,-64,94,-54,-92,66,-96,-89,-84,25,71,-79,-87,97,60,-110,118,-8, 
  /* [1][0][][] */ -34,51,-67,7,-26,100,23,21,92,-91,-101,104,77,-42,40,85,97,-32,41,127,-37,6,43,35,41,29,-24,119,24,21,91,-51,73,117,1,40,62,73,-7,-54,-57,19,-13,-95,-23,39,-20,-43, 
  /* [2][0][][] */ 72,58,-59,105,-8,-36,67,110,-88,101,-31,119,105,-41,102,-89,-72,-19,41,65,-89,-2,123,30,-20,96,127,22,-55,101,66,112,-56,-7,-84,-96,-79,113,115,-15,-116,-66,24,-2,-73,121,-14,-67, 
  /* [3][0][][] */ 72,-2,41,-19,-76,50,-74,42,53,22,63,-1,89,103,76,3,115,102,-64,22,120,-92,-78,-127,-26,-117,-86,112,38,-104,88,7,-61,-40,-23,-18,-95,-31,48,45,-28,-96,-100,-14,73,38,-49,-88, 
  /* [4][0][][] */ 38,92,-7,44,-41,-40,37,4,51,82,-23,51,17,-33,-27,-83,-24,-15,-79,2,101,-109,77,17,-12,-19,50,-73,-62,22,-79,-69,60,107,2,-120,-63,-23,-127,41,-61,-78,-86,-107,22,104,25,46, 
  /* [5][0][][] */ 84,-73,64,80,40,-85,2,58,97,-103,-24,-86,20,68,45,53,38,46,-76,94,31,50,0,-42,-127,-63,-3,-78,42,41,-7,-89,-30,4,-67,16,-100,-50,41,-3,-97,-45,38,65,-30,17,31,-45, 
  /* [6][0][][] */ 51,-45,115,77,-90,-66,15,65,-14,-87,7,-77,89,72,116,-121,41,34,-2,104,-82,-127,117,65,-64,-82,-12,-64,-29,-120,93,-82,-97,-127,-48,-110,-12,86,-116,93,77,58,24,-11,-120,109,-88,-48, 
  /* [7][0][][] */ 127,76,-25,-30,-54,124,-30,12,114,16,-88,19,59,-93,56,86,41,21,3,112,58,41,-2,84,-53,102,51,62,-61,111,-26,47,33,33,66,99,-84,85,-2,-21,91,-59,84,59,56,2,100,-93, 
  /* [8][0][][] */ -9,15,-47,-97,45,9,-61,-32,-6,25,32,92,-11,-31,-97,-87,-55,79,-71,6,19,-38,66,96,-118,76,26,61,-82,3,-87,99,78,-44,33,-17,103,-14,-27,56,70,87,-118,-127,-23,-32,-35,93, 
  /* [9][0][][] */ -1,6,118,47,82,-114,-21,-127,44,49,-14,59,-33,-82,-110,-30,7,0,-108,-72,2,100,-120,-111,115,-9,-13,24,-17,-65,-86,102,63,-3,24,-22,-83,13,-37,-48,50,-75,57,-103,79,24,-112,52, 
  /* [10][0][][] */ -38,100,95,-56,-3,124,92,40,50,43,26,-66,111,65,-17,32,-53,89,-94,-52,-7,41,63,-62,36,65,-96,-98,-34,96,-101,-66,97,111,127,85,-30,19,-26,46,-32,126,-101,-36,-83,-56,8,-47, 
  /* [11][0][][] */ 127,28,-9,108,124,62,38,41,117,99,-71,106,5,-95,42,-44,-63,-89,66,47,39,83,30,-97,-95,-79,-3,79,89,9,17,-5,-72,-57,59,55,-50,83,-21,-46,-20,111,-62,6,-28,-54,-76,-74, 
  /* [12][0][][] */ 35,84,-48,11,98,27,-47,46,-63,70,-9,17,-32,-3,63,-57,-107,-22,-41,-69,36,2,25,103,-58,-35,115,-84,104,30,-41,127,-71,-55,-34,28,8,-60,-10,52,118,51,-98,-36,-8,-78,-28,126, 
  /* [13][0][][] */ 125,-41,105,101,101,127,64,73,79,-86,14,-24,97,55,78,-27,-117,-59,-61,37,74,-15,118,-37,-53,48,21,29,-70,-70,70,50,50,110,-11,45,-68,-19,31,73,-54,85,-42,11,-30,31,7,-18, 
  /* [14][0][][] */ -65,-99,77,60,68,-34,-25,-126,-87,-48,59,72,-40,-91,-98,-87,-64,-63,2,16,-53,25,-12,52,-124,-80,-40,22,-126,-127,-88,27,97,-33,-42,-3,85,109,25,-119,-17,-122,29,80,57,-122,57,-93, 
  /* [15][0][][] */ 13,-43,-27,75,92,-100,68,-111,55,-6,-86,15,98,4,-109,-127,107,9,-111,20,45,9,62,111,88,65,28,93,1,51,70,-113,-5,-1,-83,-18,-77,106,114,-85,13,114,-73,-48,17,-86,-60,-99, 
  /* [16][0][][] */ -88,-14,107,-71,35,103,-40,33,42,43,-108,93,-22,-33,-68,-78,127,79,73,61,109,73,-43,50,-35,51,-85,57,-113,2,55,5,-120,72,51,52,-44,49,-57,-77,19,-57,69,100,57,106,97,-23, 
  /* [17][0][][] */ 38,-79,22,49,-29,-127,-89,-126,22,-75,61,43,106,24,-90,15,-4,17,84,76,-83,-28,17,-43,35,32,-55,36,115,-48,-58,68,-24,-18,24,-10,-51,72,-71,-20,-117,-47,-11,-6,5,-17,77,-89, 
  /* [18][0][][] */ -96,96,113,-78,-15,-120,-107,0,-13,72,-117,-50,-49,45,55,-67,27,-20,50,-30,101,-56,13,-91,28,-104,-27,108,20,28,33,43,40,-36,-122,-120,-40,29,-43,61,-48,-7,-58,-20,-127,12,17,-12, 
  /* [19][0][][] */ 19,30,86,40,65,-93,116,94,101,-63,45,15,-79,52,-59,54,88,-97,127,60,-21,88,-40,22,83,-67,33,-71,-74,-121,-50,52,86,-76,43,7,10,-58,-56,-90,54,-112,-77,29,-80,33,83,-92, 
  /* [20][0][][] */ -17,68,80,98,-104,93,31,57,6,8,-104,11,-17,101,35,-91,-44,-42,-83,-45,19,-61,-94,-86,90,-92,-126,44,18,4,-54,123,103,41,-28,51,40,-47,-25,-127,-101,-47,-105,-123,-40,-75,-87,108, 
  /* [21][0][][] */ 119,96,80,-101,115,-53,56,32,9,-56,-62,58,15,12,-37,-68,-120,-30,40,-10,120,-40,84,-79,68,-79,-16,87,29,23,-7,-8,19,35,-89,-108,127,113,-120,-26,2,18,35,-5,-91,-93,-79,106, 
  /* [22][0][][] */ 33,-43,-64,-88,91,-37,85,58,-90,89,-80,-95,116,-127,-97,-65,30,71,-102,-60,85,-66,32,34,99,-16,-99,104,-44,-65,-77,-100,52,65,21,13,12,-19,-49,-111,-1,-9,1,86,59,-114,92,-13, 
  /* [23][0][][] */ 81,-68,5,62,103,-86,-19,-87,64,-68,80,69,27,-127,32,-14,72,-29,-98,103,97,-67,105,-27,-12,-2,96,31,80,61,51,-24,-26,52,27,43,101,5,-101,16,-100,10,17,-105,-56,-87,117,36, 
  /* [24][0][][] */ -87,-32,-99,-60,-74,-104,-95,-83,71,123,69,31,127,33,-23,-106,-89,21,33,-44,102,-70,-50,-33,68,-29,89,70,122,67,-24,-52,9,21,58,36,-41,-86,70,-21,-77,-90,115,3,31,-35,53,83, 
  /* [25][0][][] */ -75,-40,-77,-2,98,-56,-127,59,50,-100,-52,17,80,-30,-92,-7,-84,55,34,-98,72,89,-8,-52,19,-52,-85,48,87,-74,12,115,99,-97,50,76,103,-58,-15,-17,-83,101,-93,-3,104,41,72,45, 
  /* [26][0][][] */ 50,-115,-20,-4,-102,-12,7,-12,-114,-122,106,79,-76,-43,27,-23,127,33,-74,-54,16,78,99,7,46,62,22,54,20,3,-93,-1,-35,-63,-97,-98,-61,84,-47,101,-101,104,75,36,-72,83,-37,105, 
  /* [27][0][][] */ 9,0,-67,-110,-127,-75,-55,-23,35,93,29,-104,-39,69,73,-34,63,-18,51,-90,-101,2,-40,-31,-107,40,-118,-11,54,21,-20,-16,54,61,-101,-95,-97,-74,-120,82,-101,9,16,5,90,20,59,94, 
  /* [28][0][][] */ 76,-4,75,36,-127,-63,-100,-76,-52,-105,55,43,-81,-80,-1,81,81,94,-91,63,-32,17,-104,-72,-108,69,-77,-62,-86,-73,-5,-22,-114,-5,71,64,11,-107,-67,28,78,35,-92,37,-105,-35,-8,39, 
  /* [29][0][][] */ 35,48,49,-59,-94,-4,-106,-3,108,-28,-85,-96,127,-90,-58,-65,-101,94,46,-65,-88,-27,67,12,-37,13,-50,-34,-93,-19,120,-17,55,3,-69,-48,-19,111,-10,97,56,106,-31,101,3,109,-45,-21, 
  /* [30][0][][] */ 42,-70,-64,34,-106,20,-64,-19,112,-21,19,-13,-107,19,56,7,42,76,89,-100,39,-106,-112,9,-94,23,-75,115,37,-116,-92,3,-91,-76,-126,-60,11,-18,-9,21,86,-81,32,127,103,-48,101,58, 
  /* [31][0][][] */ 73,-104,42,105,48,57,-63,-111,-40,-26,-91,-95,103,-127,-55,108,-50,-101,35,49,65,31,-39,106,48,-127,33,39,-79,-85,42,112,14,17,-103,-15,101,-43,-74,-125,57,-78,-27,29,0,-58,-47,22, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022506255190819502, 0.0023163012228906155, 0.0022482499480247498, 0.0022255110088735819, 0.0022048745304346085, 0.0025213637854903936, 0.0022038700990378857, 0.0025382940657436848, 0.0023872349411249161, 0.0022035355214029551, 0.0023459442891180515, 0.002423600759357214, 0.0023711058311164379, 0.0024395412765443325, 0.0022999332286417484, 0.0021076744887977839, 0.0022029716055840254, 0.0026217107661068439, 0.0022011271212249994, 0.0022496641613543034, 0.0020509439054876566, 0.0021880653221160173, 0.0024530070368200541, 0.0024194673169404268, 0.0023486502468585968, 0.0024080055300146341, 0.0023078350350260735, 0.002294185571372509, 0.0024786272551864386, 0.0022023750934749842, 0.0022523978259414434, 0.0021828804165124893, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { -172, 943, 1877, 4489, 7862, -1054, -1301, 15416, 1273, 6965, 244, -785, 4698, -4050, 1906, -2005, -199, -3288, 958, 1554, 2837, 2930, 4982, 577, -2741, -1821, 333, 1916, 1467, 1928, -919, 2920, 4442, 4406, 3821, 1494, 9624, 1468, 1040, -1046, 655, 12623, -780, 1493, 8829, 43, 1557, 6332, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00042377959471195936, 0.00030978041468188167, 0.00014599780843127519, 0.00013787341595161706, 0.00012144600623287261, 0.00015138275921344757, 0.0002491343766450882, 6.3150437199510634e-05, 0.00023438272182829678, 0.00011504157009767368, 0.0001606083387741819, 0.00046520953765138984, 0.00014079047832638025, 0.00015417407848872244, 0.00038676263648085296, 0.00014093976642470807, 0.00014039574307389557, 5.4934524087002501e-05, 0.00022645686112809926, 0.00035420310450717807, 0.00023001365480013192, 0.00017755515000317246, 0.00013228366151452065, 0.00019341202278155833, 0.00018453595112077892, 0.00026019269716925919, 0.00042124919127672911, 0.00027828192105516791, 0.00022475530568044633, 0.00031927539384923875, 0.00013415474677458405, 0.00021924918110016733, 0.00014798130723647773, 0.00016388522635679692, 0.00011542040738277137, 0.0001617483067093417, 8.7340384197887033e-05, 0.00017399305943399668, 0.00015472625091206282, 0.00025263836141675711, 0.00020507209410425276, 7.7387892815750092e-05, 0.00021879764972254634, 0.0001269458734896034, 9.0718029241543263e-05, 0.00022279156837612391, 0.00017135134839918464, 0.00011938314128201455, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 22,-14,-72,7,-127,10,-47,-7, 
  /* [1][0][][] */ -114,30,127,11,-122,-26,-4,-12, 
  /* [2][0][][] */ 11,71,-32,27,-52,-127,-17,86, 
  /* [3][0][][] */ -94,47,-3,127,7,-43,-68,-54, 
  /* [4][0][][] */ 10,-11,41,-127,-19,27,-119,12, 
  /* [5][0][][] */ 72,127,-60,-53,-45,-13,35,-124, 
  /* [6][0][][] */ 69,-46,50,95,-55,-127,2,-108, 
  /* [7][0][][] */ 36,118,-49,-64,-64,-27,21,-127, 
  /* [8][0][][] */ -3,-25,54,-5,12,12,-47,-127, 
  /* [9][0][][] */ -78,-6,-98,25,-127,-83,-84,-20, 
  /* [10][0][][] */ 101,3,107,-36,-127,11,102,97, 
  /* [11][0][][] */ 127,-33,-86,10,55,-2,-81,0, 
  /* [12][0][][] */ -29,-103,127,15,28,10,-72,70, 
  /* [13][0][][] */ 39,-75,85,-10,18,-127,48,-120, 
  /* [14][0][][] */ -112,51,127,-9,-40,-64,59,-59, 
  /* [15][0][][] */ 47,125,-41,-61,-75,-2,35,-127, 
  /* [16][0][][] */ 28,104,-48,66,-2,-37,-14,127, 
  /* [17][0][][] */ 22,69,-19,84,-46,70,-127,46, 
  /* [18][0][][] */ 72,-31,127,-32,69,-95,11,-27, 
  /* [19][0][][] */ 6,1,17,127,32,-40,-31,-110, 
  /* [20][0][][] */ 1,22,-24,41,-8,53,-127,13, 
  /* [21][0][][] */ 5,0,45,16,24,127,47,-60, 
  /* [22][0][][] */ 56,-127,-6,50,-82,72,25,14, 
  /* [23][0][][] */ -37,-115,-8,-107,-8,-77,-8,-127, 
  /* [24][0][][] */ 17,26,-21,-61,-39,-127,-48,49, 
  /* [25][0][][] */ 68,66,127,14,-1,20,-49,-1, 
  /* [26][0][][] */ -118,45,127,-50,-90,-22,93,-9, 
  /* [27][0][][] */ -78,41,-32,-100,26,127,-16,86, 
  /* [28][0][][] */ 10,-102,64,51,51,7,-34,127, 
  /* [29][0][][] */ -127,68,74,-38,-123,-1,100,-36, 
  /* [30][0][][] */ 95,-84,9,52,-127,-8,38,-94, 
  /* [31][0][][] */ 53,88,62,-44,-123,-19,10,127, 
  /* [32][0][][] */ -30,-25,98,-41,24,7,-127,-100, 
  /* [33][0][][] */ 58,35,103,-127,13,40,-38,67, 
  /* [34][0][][] */ -22,-114,89,-37,38,127,57,-90, 
  /* [35][0][][] */ 31,17,91,-3,17,127,23,-49, 
  /* [36][0][][] */ -18,26,-19,46,47,-127,2,21, 
  /* [37][0][][] */ 26,-16,50,19,-127,113,-26,-24, 
  /* [38][0][][] */ -127,-15,-94,-26,91,-24,-108,-37, 
  /* [39][0][][] */ 20,-1,38,-108,-30,50,-127,11, 
  /* [40][0][][] */ 100,-34,-72,-127,66,63,63,-18, 
  /* [41][0][][] */ 14,-19,-3,127,-113,17,-85,-67, 
  /* [42][0][][] */ -76,28,65,127,-61,-66,-58,5, 
  /* [43][0][][] */ 82,-114,107,55,-112,27,127,60, 
  /* [44][0][][] */ 15,-52,38,-69,-27,127,43,28, 
  /* [45][0][][] */ -30,31,-39,6,70,-48,-127,-36, 
  /* [46][0][][] */ -106,-98,-6,-17,27,127,-44,-113, 
  /* [47][0][][] */ -127,-105,-57,38,18,125,-37,-60, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0049428269267082214, 0.0036131776869297028, 0.0017028707079589367, 0.001608110498636961, 0.0014165065949782729, 0.0017656791023910046, 0.0029058218933641911, 0.00073656608583405614, 0.0027337635401636362, 0.0013418073067441583, 0.0018732831813395023, 0.005426052026450634, 0.0016421341570094228, 0.0017982360441237688, 0.0045110732316970825, 0.0016438753809779882, 0.0016375300474464893, 0.00064073834801092744, 0.0026413188315927982, 0.0041313092224299908, 0.0026828041300177574, 0.0020709452219307423, 0.0015429134946316481, 0.0022558947093784809, 0.0021523670293390751, 0.0030348026193678379, 0.0049133128486573696, 0.0032457895576953888, 0.002621472580358386, 0.0037239240482449532, 0.0015647371765226126, 0.0025572509039193392, 0.0017260056920349598, 0.0019115038448944688, 0.0013462259666994214, 0.0018865794409066439, 0.0010187097359448671, 0.0020293982233852148, 0.0018046764889732003, 0.0029466913547366858, 0.00239189388230443, 0.0009026271291077137, 0.0025519842747598886, 0.0014806551625952125, 0.0010581054957583547, 0.0025985680986195803, 0.0019985861144959927, 0.0013924459926784039, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -2132, 575, -13482, 10860, 7191, -2702, 9096, 1262, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 8.9496337750460953e-05, 0.00016511535795871168, 8.7446816905867308e-05, 9.8309712484478951e-05, 0.00013386759383138269, 7.9336889029946178e-05, 0.00011447275755926967, 0.00014466927677858621, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 11,44,30,25,-4,-32,43,53,5,24,-3,-4,42,-31,45,-26,-49,-26,-127,-5,49,-41,15,39,5,-12,49,-15,-2,-48,0,34,-39,53,48,0,45,79,-61,-47,4,15,-94,-45,32,28,-30,-51, 
  /* [1][0][][] */ -21,-35,-4,70,-33,-5,-9,-9,15,2,-14,-42,-5,-5,20,0,47,26,48,-46,7,21,28,-50,-4,-16,-25,-32,-32,13,-17,5,-29,-19,-93,74,23,18,-127,-16,20,-11,68,29,94,-25,-39,49, 
  /* [2][0][][] */ -3,-1,26,-25,-27,-15,-6,116,-37,87,-47,-9,127,-12,40,-9,-63,-71,-1,35,-11,-12,26,1,12,59,5,45,15,4,81,27,-69,-23,25,58,10,59,66,-115,41,39,-45,-34,16,35,-3,-15, 
  /* [3][0][][] */ 27,-10,-127,-19,22,-9,57,-38,-31,-17,-12,9,-43,-60,42,22,8,45,11,36,-63,19,-60,-7,-35,-66,25,8,-79,-62,-55,17,72,34,-41,19,-53,-2,29,-19,29,-58,-21,11,59,-47,43,-20, 
  /* [4][0][][] */ 2,49,6,-16,28,-5,-78,-110,-31,28,-16,80,1,-23,-8,54,46,55,-78,4,28,3,-34,-13,43,-9,2,-6,-17,10,-6,-39,27,-19,-127,26,-40,2,38,41,-32,-41,76,44,16,-45,13,19, 
  /* [5][0][][] */ -43,-39,99,17,88,28,61,-13,-127,9,-108,-26,-81,-78,47,88,-25,19,26,15,35,28,22,16,-14,7,-1,-12,-45,-9,-12,-35,-32,31,62,21,-17,66,-15,-7,52,-40,-61,42,-4,25,37,16, 
  /* [6][0][][] */ 78,62,-16,24,16,-28,-105,-69,4,-3,-4,71,-20,-33,3,35,-37,38,16,-11,127,-18,65,112,5,-58,16,-33,-54,-18,-34,-56,53,-27,20,-6,-5,27,-53,36,-55,-45,-62,-34,-28,-55,44,0, 
  /* [7][0][][] */ 12,52,39,-86,58,-45,-35,-14,4,13,32,27,-37,5,30,-8,-14,28,-13,57,-48,-8,-15,55,11,-29,5,31,-6,30,-40,-12,48,-7,-36,-41,-70,11,127,-6,15,-36,-25,-11,44,8,59,2, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0038035942707210779, 0.0070174024440348148, 0.0037164897657930851, 0.0041781626641750336, 0.0056893727742135525, 0.0033718177583068609, 0.0048650922253727913, 0.0061484440229833126, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { 77, -2295, 2684, -452, -94, 212, 3391, 12019, -5011, 16672, 9313, -2679, 7055, -1070, 4815, -603, 1022, -394, 2019, -1499, -2545, -1333, -10556, -2185, 7646, 34, 1200, 2461, 7766, 7188, 7497, -1791, -6896, 5, -2325, -4992, 4166, 7181, -3126, 12570, 549, -173, -4329, -1708, -6299, 12615, 38, 6746, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 4.5401666284305975e-05, 0.00028697572997771204, 0.00018676850595511496, 0.00026127870660275221, 0.00013991037849336863, 0.00041162752313539386, 0.00021191690757405013, 0.00048523690202273428, 0.00023889289877843112, 8.6025138443801552e-05, 0.00014886324061080813, 0.00015070110384840518, 0.00014601198199670762, 0.00029680252191610634, 0.00017626491899136454, 0.00020923149713780731, 0.00061545113567262888, 0.0003324781428091228, 9.0659908892121166e-05, 0.00031856101122684777, 0.00013678013056050986, 0.00024114603002090007, 0.00013010879047214985, 0.00032442060182802379, 0.00010287839540978894, 0.00030643670470453799, 0.000110813976789359, 0.00019487999088596553, 0.00018684005772229284, 0.00013052504800725728, 0.0001549931475892663, 0.00020930753089487553, 0.00020657619461417198, 0.00037897418951615691, 0.00037189782597124577, 0.00015488978533539921, 0.00016167064313776791, 9.623231744626537e-05, 0.00032421216019429266, 0.000115237693535164, 0.00024887948529794812, 0.00023373568546958268, 0.00015304918633773923, 0.00026441260706633329, 0.00029376355814747512, 9.8405020253267139e-05, 0.00016158586367964745, 0.00014543248107656837, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 87,75,47,29,3,-70,40,32,-70,-21,-47,48,50,18,0,19,47,-45,94,74,64,-16,-7,8,-18,-67,53,0,-32,-65,28,41,30,-92,4,28,-40,36,-16,-127,0,-111,-46,-18,3,-127,81,-127, 127,12,63,-85,81,53,47,-51,-116,-126,26,127,10,-49,-127,22,-4,102,67,73,33,73,68,30,127,-63,-14,-127,-127,-28,-127,127,28,-96,-85,127,33,-89,-82,-106,19,127,-71,26,-51,-89,95,32, 70,-2,25,-75,-5,-53,41,23,-58,-6,2,29,29,27,49,8,-47,8,68,63,-40,-38,-70,-7,-38,-65,-72,-35,-41,-77,-8,15,55,-51,38,26,-64,-56,-1,-98,8,-46,105,-29,2,-113,34,-54, 
  /* [0][1][][] */ 127,6,23,55,52,74,1,-127,105,-127,-127,-84,7,48,-57,127,-127,90,83,43,-9,91,64,-44,-15,127,93,28,32,-40,-105,40,60,100,-72,52,-56,2,5,-85,-12,-63,20,-102,39,-11,65,-25, 19,127,-127,92,127,54,-127,11,109,-40,0,78,-127,127,-34,2,41,-127,-127,-22,122,26,127,-127,-102,89,-44,4,-1,-39,41,-14,127,-22,118,-64,127,-127,127,111,127,78,-113,2,98,40,-127,-19, 61,-7,10,-127,59,50,15,-87,127,-42,-99,-25,14,32,-53,105,72,-12,30,55,25,-127,25,123,-89,127,-69,-12,50,-22,-58,48,0,76,127,49,-65,-19,-44,-38,-15,-34,127,127,127,-30,89,-15, 
  /* [0][2][][] */ 50,43,27,47,15,-3,27,32,1,-43,-15,-19,42,-65,49,-52,-12,33,79,-42,127,-4,-2,-64,-113,-63,127,87,-3,-114,-59,63,37,38,-31,2,-62,24,-1,-11,-17,-76,26,-18,5,-10,27,-76, 63,11,1,8,5,-127,-3,-77,-17,-66,24,-5,-11,-59,-9,29,7,-42,10,127,114,67,52,33,31,-44,-77,45,-126,-31,-64,25,16,127,-61,-4,-89,-120,19,-13,-93,92,-12,10,-41,-84,78,-42, 20,-4,27,-63,31,-7,37,41,-14,-13,27,1,37,-60,61,-20,-5,-31,52,-110,12,-63,-67,70,-93,-69,-115,28,-6,-127,11,37,50,-35,-6,39,-108,-66,-25,-27,-20,-16,-10,4,-4,12,-28,-58, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0019423643825575709, 0.012277334928512573, 0.0079902904108166695, 0.011177970096468925, 0.0059856157749891281, 0.017610160633921623, 0.0090661840513348579, 0.020759301260113716, 0.01022026501595974, 0.0036803092807531357, 0.0063686352223157883, 0.0064472625963389874, 0.0062466533854603767, 0.012697742320597172, 0.0075409281998872757, 0.0089512970298528671, 0.026330098509788513, 0.014224009588360786, 0.0038785929791629314, 0.013628609478473663, 0.0058516985736787319, 0.010316657833755016, 0.0055662868544459343, 0.013879292644560337, 0.0044013215228915215, 0.013109909370541573, 0.004740819800645113, 0.0083373142406344414, 0.0079933516681194305, 0.0055840946733951569, 0.006630883552134037, 0.008954550139605999, 0.0088376989588141441, 0.016213193535804749, 0.015910454094409943, 0.00662646209821105, 0.0069165593013167381, 0.0041169906035065651, 0.013870375230908394, 0.0049300743266940117, 0.01064750924706459, 0.0099996300414204597, 0.0065477173775434494, 0.01131204329431057, 0.012567729689180851, 0.0042099426500499249, 0.0069129322655498981, 0.0062218611128628254, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { -1047, -2475, 2159, -651, -2883, 2399, 2241, 16334, 2301, 1961, 7507, 2595, 1366, 12775, 5786, -2498, 14202, 2448, 727, -3263, -28, -517, 1171, 9837, 797, 7445, 2551, -179, 6386, 283, 1922, -1447, -1602, -3512, -6123, 1929, 2411, 1979, 2185, 2635, 1979, 710, 5124, 2927, 17753, 5431, -2238, 772, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00025037824525497854, 0.0001999129744945094, 0.00028231923351995647, 0.00017761765047907829, 0.00019172347674611956, 0.00011269118840573356, 0.00025807745987549424, 7.5254210969433188e-05, 0.00013503814989235252, 0.00026749525568448007, 0.0001092449965653941, 0.00013920638593845069, 0.0002662279293872416, 7.0487396442331374e-05, 0.00012726863496936858, 0.00018190091941505671, 7.3195747972931713e-05, 0.00010607484000502154, 0.00031106057576835155, 0.00019125753897242248, 0.00014046159049030393, 0.0003414294624235481, 0.00027650658739730716, 9.6955467597581446e-05, 0.00019753171363845468, 9.0408502728678286e-05, 0.00023915331985335797, 0.00026679452275857329, 8.14713494037278e-05, 0.00035562625271268189, 0.00012703203537967056, 0.00027593411505222321, 0.00029805779922753572, 0.00010470856068423018, 8.8420259999111295e-05, 0.00023336056619882584, 0.00018427307077217847, 0.00020018484792672098, 0.0002197565627284348, 0.00017238507280126214, 0.00031135720200836658, 0.00027406460139900446, 0.00013608844892587513, 0.00017802616639528424, 5.4135154641699046e-05, 0.00013478146865963936, 0.00011175672261742875, 0.000264933449216187, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -12,-46,-37,111,17,-68,-94,-127, 
  /* [1][0][][] */ 127,-30,42,-27,24,-69,3,25, 
  /* [2][0][][] */ -15,53,2,-127,10,92,-55,55, 
  /* [3][0][][] */ -23,127,-50,-94,-105,1,34,-82, 
  /* [4][0][][] */ -8,-64,-89,-42,20,-77,-59,-127, 
  /* [5][0][][] */ -45,-78,83,52,14,127,38,-114, 
  /* [6][0][][] */ -7,2,-56,39,11,11,-127,-51, 
  /* [7][0][][] */ 25,-21,8,30,-48,51,127,68, 
  /* [8][0][][] */ 4,39,-83,-17,-45,-127,-56,67, 
  /* [9][0][][] */ 79,10,-69,-17,1,127,-58,125, 
  /* [10][0][][] */ -22,56,78,123,94,127,-6,-55, 
  /* [11][0][][] */ -32,-70,8,40,-127,86,-9,-17, 
  /* [12][0][][] */ -25,30,84,-59,74,-99,-127,-54, 
  /* [13][0][][] */ 50,36,-104,-125,-20,-78,-60,127, 
  /* [14][0][][] */ -36,-127,14,-68,-4,-72,7,-110, 
  /* [15][0][][] */ -2,66,72,90,96,127,3,-31, 
  /* [16][0][][] */ 34,11,-22,-127,52,107,-70,78, 
  /* [17][0][][] */ -107,109,-127,41,37,116,-93,64, 
  /* [18][0][][] */ -127,60,24,-14,-79,16,-26,6, 
  /* [19][0][][] */ 127,7,-62,-36,82,-68,78,-111, 
  /* [20][0][][] */ 127,-56,46,-25,-51,26,85,9, 
  /* [21][0][][] */ 13,-36,-32,42,-2,28,127,33, 
  /* [22][0][][] */ 95,47,-112,-106,-2,127,69,102, 
  /* [23][0][][] */ -32,46,-50,-81,43,11,-127,9, 
  /* [24][0][][] */ 127,-73,-98,-32,115,-58,15,27, 
  /* [25][0][][] */ -28,-78,84,-41,65,127,-21,-88, 
  /* [26][0][][] */ 19,-59,38,31,127,-67,-45,-62, 
  /* [27][0][][] */ -24,-127,71,86,10,-3,-42,92, 
  /* [28][0][][] */ -8,39,-87,-38,101,-89,-33,127, 
  /* [29][0][][] */ -81,27,127,-96,19,-38,27,31, 
  /* [30][0][][] */ 118,-87,97,-23,-71,-127,65,-28, 
  /* [31][0][][] */ 24,28,48,-5,-29,-12,-127,13, 
  /* [32][0][][] */ 17,-20,24,127,-31,-90,-40,-91, 
  /* [33][0][][] */ 105,-84,-60,107,-127,91,-54,-42, 
  /* [34][0][][] */ 9,-98,-6,-66,-122,127,39,-26, 
  /* [35][0][][] */ 27,127,90,21,13,13,-68,3, 
  /* [36][0][][] */ 20,117,-84,-127,-93,11,94,-79, 
  /* [37][0][][] */ 43,-5,46,14,35,127,56,18, 
  /* [38][0][][] */ -70,-90,96,51,32,-7,-57,127, 
  /* [39][0][][] */ 8,30,127,-47,-16,45,-27,25, 
  /* [40][0][][] */ 9,0,22,1,4,-26,127,9, 
  /* [41][0][][] */ -13,0,-67,-127,-76,-75,-62,25, 
  /* [42][0][][] */ 39,-5,59,-40,-127,-54,-44,23, 
  /* [43][0][][] */ 82,-13,39,33,-79,-125,127,22, 
  /* [44][0][][] */ -68,-127,-12,-73,-11,7,-10,-126, 
  /* [45][0][][] */ 23,94,83,68,34,127,-60,36, 
  /* [46][0][][] */ -123,-13,11,66,119,64,-83,127, 
  /* [47][0][][] */ 16,82,-57,-46,6,-49,45,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0036986905615776777, 0.0029531966429203749, 0.0041705360636115074, 0.0026238409336656332, 0.0028322180733084679, 0.0016647205920889974, 0.0038124262355268002, 0.0011116861132904887, 0.0019948391709476709, 0.0039515499956905842, 0.0016138120554387569, 0.0020564140286296606, 0.0039328285492956638, 0.0010412688134238124, 0.0018800646066665649, 0.0026871152222156525, 0.0010812777327373624, 0.0015669811982661486, 0.0045951148495078087, 0.0028253351338207722, 0.0020749564282596111, 0.0050437366589903831, 0.0040846690535545349, 0.0014322660863399506, 0.0029180196579545736, 0.0013355516130104661, 0.003532871138304472, 0.0039411983452737331, 0.0012035282561555505, 0.0052534574642777443, 0.0018765694694593549, 0.0040762121789157391, 0.0044030323624610901, 0.0015467979246750474, 0.0013061804929748178, 0.0034472981933504343, 0.0027221576310694218, 0.0029572129715234041, 0.0032463343814015388, 0.0025465432554483414, 0.0045994967222213745, 0.004048595204949379, 0.0020103545393794775, 0.0026298756711184978, 0.000799706787802279, 0.001991047291085124, 0.0016509162960574031, 0.0039137057028710842, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { 15104, 2568, 14003, -5821, -14045, 9696, 4456, 14022, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 9.2756374215241522e-05, 0.00010161551472265273, 9.2170615971554071e-05, 7.7882490586489439e-05, 0.00012875680113211274, 0.00010174733324674889, 8.4003979281987995e-05, 9.2626738478429615e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-16,-14,-8,-22,-86,-38,-7,58,-40,-49,-27,-19,81,-47,1,12,-11,1,14,25,-29,1,12,35,5,2,22,12,61,-45,-82,19,-61,12,-29,38,-40,-6,22,-53,-17,-27,-46,-70,-80,6,-25, 
  /* [1][0][][] */ -70,2,92,-53,61,33,41,29,-15,11,0,98,28,-28,-127,-59,-93,-82,34,-16,-6,89,-51,2,22,-104,35,104,40,-19,28,46,50,32,9,37,-65,-23,21,17,4,-23,-92,16,-10,-48,-94,39, 
  /* [2][0][][] */ 89,38,-28,-60,-50,1,-34,-92,30,30,-82,-50,-16,51,-56,48,-14,76,12,9,65,50,4,1,-127,22,25,-52,-1,31,33,-87,10,-33,15,22,-52,-47,12,32,-115,-113,-29,-50,-54,-91,29,4, 
  /* [3][0][][] */ 14,-2,18,25,-101,-19,-5,43,-34,-56,-7,72,13,-21,-73,-40,-34,28,4,-60,-37,127,18,-55,21,46,48,-45,18,11,9,20,30,26,10,-7,48,56,24,-6,37,-20,21,-43,-16,6,21,31, 
  /* [4][0][][] */ -42,13,-127,14,-9,88,17,30,-13,117,39,57,25,-64,-12,30,-18,4,-18,36,-4,40,-71,21,-3,1,51,-20,41,-68,113,91,45,46,7,-57,-78,17,-4,-18,49,19,31,38,46,36,32,48, 
  /* [5][0][][] */ -32,-2,30,-9,55,-66,-35,-36,-39,-58,9,-35,39,2,-10,6,21,-4,5,28,22,65,22,15,13,1,-35,-7,-33,-2,-127,-15,-44,-12,21,-21,-3,-30,4,-17,-12,-4,-31,-8,26,33,-7,37, 
  /* [6][0][][] */ 9,59,4,64,-21,36,-56,56,-76,-33,49,21,51,6,34,17,10,-55,-42,39,-7,60,31,-39,-87,-16,-38,24,-101,-2,-98,3,7,-39,-42,-55,127,-11,-49,-65,61,42,37,-55,-77,-18,-59,-39, 
  /* [7][0][][] */ -52,15,-88,19,-21,-2,-8,-15,-53,-38,33,67,46,18,-61,-64,-56,84,-4,-3,50,10,30,-40,-46,102,-48,-112,-46,-18,-101,-15,-20,-28,-59,-10,-29,-45,-45,-21,-21,41,43,-13,-62,-58,127,-63, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0039421459659934044, 0.0043186591938138008, 0.0039172512479126453, 0.0033100058790296316, 0.0054721641354262829, 0.0043242615647614002, 0.0035701689776033163, 0.0039366362616419792, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 5416, 6202, 5869, 7567, 33808, -1757, -217, -339, -1828, -11729, -1603, -2090, 19966, 7700, 3980, -2314, 6086, 4359, 339, -4260, 7319, -2345, 6595, -502, 4400, 10788, -619, 870, 219, 628, 7890, 3358, 1486, -1433, 1467, 678, 8131, 4938, -1229, -99, 6927, -6792, 3451, 1224, 2144, 1741, 4948, -2457, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00027313121245242655, 0.00013324794417712837, 0.00010043624934041873, 0.00017045781714841723, 5.8414279919816181e-05, 0.00058410258498042822, 0.00020432844758033752, 0.00035810310509987175, 0.00031926418887451291, 0.00024704993120394647, 0.00011977714893873781, 0.00030459766276180744, 6.1767284933011979e-05, 0.00014668201038148254, 0.00046168957487680018, 0.00014089794422034174, 0.00012948267976753414, 0.00016611050523351878, 0.00049840583233162761, 0.00023025411064736545, 0.00015299874939955771, 0.00020420124928932637, 0.0001341233728453517, 0.00017283931083511561, 0.00020476638746913522, 0.00018640962662175298, 0.00042985213804058731, 0.00017773154831957072, 0.0003708068688865751, 0.00034429470542818308, 0.00017983464931603521, 0.00033204746432602406, 0.00029130905750207603, 0.001194752287119627, 0.00013924924132879823, 0.00017829165153671056, 0.00024782121181488037, 0.00019145647820550948, 0.00018194840231444687, 0.00023237121058627963, 0.00017708314408082515, 0.00017899651720654219, 0.0002457540831528604, 0.00040308898314833641, 0.00040002755122259259, 0.00039672327693551779, 0.0002355306496610865, 0.00026586023159325123, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -93,-34,59,-11,-127,3,-127,4,-8,127,64,13,-81,85,16,45,32,33,18,-24,-125,-24,29,65,-26,-3,-11,-70,22,-109,92,30,-15,25,37,-34,17,-127,-17,127,-73,41,-4,-9,-18,4,17,-11, 22,-127,4,28,-47,14,-118,-2,36,31,127,73,-121,-80,-79,-41,-5,-39,111,82,7,56,-57,24,-71,-17,4,-127,9,-61,-22,-127,-12,12,-52,-127,-25,-2,14,100,127,-11,-7,127,1,-127,18,-31, -127,-1,62,5,-108,13,-75,0,-3,107,-4,-11,-77,81,25,74,-32,3,17,-44,-108,-34,66,24,9,-27,10,-49,-39,-127,50,-12,2,12,-59,-39,12,-78,17,89,-66,33,-4,6,1,11,20,44, 
  /* [0][1][][] */ 59,-40,24,1,-105,1,43,-14,-64,62,39,34,-75,-31,-65,127,-32,8,53,127,2,62,-121,-12,-35,-86,-26,-69,127,32,36,116,-127,0,101,6,-3,24,-103,-118,55,-22,14,8,-127,39,6,-47, 114,-36,-127,-127,50,127,-16,127,-127,-85,-32,127,-79,-127,-127,-126,-18,-127,-67,93,127,127,-82,91,-127,59,-113,85,-51,-44,-127,-94,11,127,-127,107,-127,-53,127,-35,-57,127,-127,-79,87,78,-127,-72, 41,-28,96,3,-64,-33,12,-21,-37,19,6,-25,-35,-97,-52,120,-127,-43,35,108,-32,53,-4,-127,23,-71,127,-10,-52,113,-49,90,101,-40,-60,9,-13,-5,-2,-60,33,-21,-7,-14,-6,32,-15,127, 
  /* [0][2][][] */ -103,-47,47,-23,-48,7,74,3,96,45,75,15,-80,75,26,-3,55,55,8,-11,-58,-21,43,32,-22,-20,-8,-2,2,44,85,-4,-8,13,80,19,12,-47,-35,-5,-47,21,9,-17,-21,-9,-5,7, -63,-110,69,-54,-52,-14,127,4,108,39,88,-31,127,-120,-65,-17,-44,43,-127,50,-81,2,-127,-15,24,-127,6,22,0,77,17,-75,-6,-43,-19,32,-19,50,54,-51,-9,18,30,-48,12,-24,4,11, -77,-7,46,-4,-75,26,57,0,48,15,12,23,-126,39,37,9,-61,57,-6,-27,-52,-32,109,-63,-6,-30,17,20,-22,34,30,-43,-7,26,-31,11,14,-34,6,-44,-40,45,24,-4,-9,6,12,-2, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.01160807628184557, 0.0056630373001098633, 0.0042685405351221561, 0.0072444570250809193, 0.0024826067965477705, 0.024824358522891998, 0.0086839590221643448, 0.015219381079077721, 0.013568727299571037, 0.010499621741473675, 0.0050905286334455013, 0.012945400550961494, 0.0026251096278429031, 0.0062339850701391697, 0.019621806219220161, 0.0059881624765694141, 0.0055030137300491333, 0.0070596961304545403, 0.021182248368859291, 0.0097857993096113205, 0.0065024467185139656, 0.0086785526946187019, 0.0057002431713044643, 0.0073456703685224056, 0.0087025715038180351, 0.0079224091023206711, 0.018268715590238571, 0.0075535904616117477, 0.015759291127324104, 0.01463252492249012, 0.0076429722830653191, 0.014112017117440701, 0.012380634434521198, 0.050776973366737366, 0.0059180925600230694, 0.0075773950666189194, 0.010532401502132416, 0.0081369001418352127, 0.0077328067272901535, 0.0098757762461900711, 0.0075260335579514503, 0.0076073519885540009, 0.010444547981023788, 0.017131282016634941, 0.017001170665025711, 0.016860738396644592, 0.010010052472352982, 0.011299059726297855, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 19641, -365, 1978, 1409, 3163, 1205, 7559, -545, 12690, 10579, -577, -62, 1741, 1557, 219, 2990, 3355, 2706, -1542, -925, 3426, 2636, 3380, 54, 4208, 2537, 6501, -480, 5827, -457, 4903, 7959, 4935, 827, 1494, 1557, 3337, 1672, 1318, 2227, -218, 3779, 1880, 5149, 8635, 2236, 75, 3114, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 5.2981326007284224e-05, 0.00033859093673527241, 0.00025658827507868409, 0.00023496300855185837, 0.00021904129243921489, 0.00013159682566765696, 8.5912630311213434e-05, 0.00027532846434041858, 7.2838134656194597e-05, 7.4346840847283602e-05, 0.00016862695338204503, 0.00016828045772854239, 0.00027186906663700938, 0.00021282208035700023, 9.8848322522826493e-05, 0.00020812204456888139, 0.00015144303324632347, 0.00025372681557200849, 0.00023320385662373155, 0.00013308603956829756, 0.00020580409909598529, 0.00013669997861143202, 0.00019197483197785914, 0.0003402739530429244, 0.00016103770758491009, 0.0002977402473334223, 0.0001447521208319813, 0.00048968824557960033, 0.00016421670443378389, 0.00012820522533729672, 0.00015218133921734989, 8.0090183473657817e-05, 0.00018651348364073783, 0.00010752770322142169, 0.00021690725407097489, 0.00039311705040745437, 0.00018661012290976942, 0.00025592962629161775, 0.00038027815753594041, 0.00010825480421772227, 0.00024821938131935894, 0.00018259549688082188, 0.00038598428363911808, 0.00013825584028381854, 0.00011162079317728058, 0.00013260524428915232, 0.00028375568217597902, 0.00022184973931871355, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 75,-93,48,-10,44,-127,-13,-85, 
  /* [1][0][][] */ -37,-51,-61,59,-127,54,-34,21, 
  /* [2][0][][] */ 72,-58,58,-21,127,-26,-9,78, 
  /* [3][0][][] */ -15,127,-16,102,2,10,-47,-44, 
  /* [4][0][][] */ -36,127,70,-44,45,25,-58,14, 
  /* [5][0][][] */ -85,25,-3,19,127,-28,87,-11, 
  /* [6][0][][] */ 127,-64,125,12,27,123,91,-20, 
  /* [7][0][][] */ -28,-49,52,48,73,17,-54,127, 
  /* [8][0][][] */ 33,-11,-28,-109,-11,127,-78,21, 
  /* [9][0][][] */ -127,25,-93,-1,98,-40,-55,13, 
  /* [10][0][][] */ -22,-80,47,34,-38,-86,-127,-81, 
  /* [11][0][][] */ 39,81,-14,-1,-22,-72,22,127, 
  /* [12][0][][] */ 58,-45,-102,53,-100,127,50,94, 
  /* [13][0][][] */ -42,-37,-127,26,-91,78,18,47, 
  /* [14][0][][] */ -59,127,-74,79,90,40,-19,72, 
  /* [15][0][][] */ -95,-1,-22,-2,93,77,-62,-127, 
  /* [16][0][][] */ 89,-127,-98,-28,-55,92,-59,-5, 
  /* [17][0][][] */ 20,127,-115,-43,-83,26,66,-115, 
  /* [18][0][][] */ -76,-120,48,27,127,-67,-38,69, 
  /* [19][0][][] */ -76,104,-28,51,-1,-112,-127,53, 
  /* [20][0][][] */ 83,-16,37,-57,-6,-57,19,127, 
  /* [21][0][][] */ 53,-41,127,101,-33,117,95,-26, 
  /* [22][0][][] */ -24,106,11,5,126,-81,-127,-61, 
  /* [23][0][][] */ 38,-59,34,127,-9,-56,64,-38, 
  /* [24][0][][] */ -29,61,127,-72,-20,-25,10,-27, 
  /* [25][0][][] */ -47,-121,101,73,26,-8,-34,127, 
  /* [26][0][][] */ 60,-19,-127,-90,-99,49,31,104, 
  /* [27][0][][] */ 38,127,-99,-72,-45,34,27,-124, 
  /* [28][0][][] */ -28,56,-59,-93,-11,-45,-127,-40, 
  /* [29][0][][] */ -97,50,-119,-68,127,52,-57,-3, 
  /* [30][0][][] */ 81,-50,9,-23,-123,119,127,67, 
  /* [31][0][][] */ -63,89,-45,86,127,-87,-4,-11, 
  /* [32][0][][] */ 2,77,52,-56,127,-33,-12,-87, 
  /* [33][0][][] */ -127,47,-117,12,49,28,-32,6, 
  /* [34][0][][] */ 41,-5,47,-68,-26,-127,67,100, 
  /* [35][0][][] */ -127,43,54,-30,-85,5,2,5, 
  /* [36][0][][] */ -2,-49,-37,37,-11,10,127,38, 
  /* [37][0][][] */ -30,-24,-72,-45,-19,-127,-69,-3, 
  /* [38][0][][] */ -101,31,19,13,-127,17,37,13, 
  /* [39][0][][] */ -40,-42,39,-13,-21,108,-103,-127, 
  /* [40][0][][] */ 75,-127,20,70,-62,-57,126,65, 
  /* [41][0][][] */ 23,127,85,52,33,25,-98,-24, 
  /* [42][0][][] */ 40,127,-29,-18,-32,19,-18,-51, 
  /* [43][0][][] */ -73,60,-85,-127,21,31,-64,67, 
  /* [44][0][][] */ -54,26,-26,13,39,127,-8,-4, 
  /* [45][0][][] */ -3,71,-80,-41,-62,-85,-12,127, 
  /* [46][0][][] */ 31,115,-109,-28,-67,23,11,-127, 
  /* [47][0][][] */ 26,4,-3,-62,-65,-127,-28,40, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.00081866484833881259, 0.0052318903617560863, 0.0039647892117500305, 0.0036306367255747318, 0.0033846152946352959, 0.0020334275905042887, 0.0013275176752358675, 0.0042543616145849228, 0.0011254912242293358, 0.001148803741671145, 0.0026056154165416956, 0.0026002612430602312, 0.0042009074240922928, 0.0032885163091123104, 0.0015273994067683816, 0.0032158915419131517, 0.0023400902282446623, 0.0039205742068588734, 0.0036034544464200735, 0.0020564389415085316, 0.0031800747383385897, 0.0021122812759131193, 0.002966385567560792, 0.0052578961476683617, 0.0024883467704057693, 0.0046006673946976662, 0.0022367027122527361, 0.0075666387565433979, 0.0025374684482812881, 0.0019810209050774574, 0.0023514984641224146, 0.0012375495862215757, 0.0028819970320910215, 0.0016615127678960562, 0.0033516401890665293, 0.0060744252987205982, 0.0028834904078394175, 0.0039546117186546326, 0.0058760391548275948, 0.0016727478941902518, 0.0038354734424501657, 0.002821456640958786, 0.005964210256934166, 0.0021363224368542433, 0.0017247590003535151, 0.0020490097813308239, 0.0043845786713063717, 0.0034280112013220787, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 5644, -1541, -2612, 3138, 1370, -17255, -2662, -10799, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00019805226475000381, 0.00015403858560603112, 0.00020709923410322517, 0.00014107655442785472, 0.00022627307043876499, 8.4569976024795324e-05, 0.00011403020471334457, 0.0001216911114170216, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -24,17,3,29,-20,11,0,29,-46,-4,-34,-2,-15,14,33,6,-47,-19,30,-16,-25,127,-19,-18,-22,-37,4,32,-35,33,8,-23,-8,18,30,37,20,5,28,-22,3,-33,-16,-13,-16,26,23,14, 
  /* [1][0][][] */ 8,54,4,50,29,38,46,115,-47,-46,79,-29,-41,-35,26,-22,-20,0,37,3,31,-127,-4,-72,7,15,-17,12,-9,8,-34,-57,-42,4,19,-9,16,65,67,-19,22,17,40,-32,-32,46,8,51, 
  /* [2][0][][] */ -1,27,1,27,28,17,-30,33,20,10,65,17,7,-12,32,-54,23,28,-7,10,-17,127,7,-10,22,-42,-3,1,-21,33,-22,-59,-17,7,20,-41,30,-14,-35,-26,26,-13,-6,-45,-37,32,11,15, 
  /* [3][0][][] */ -38,53,-6,1,-17,35,64,-1,2,3,7,13,-14,39,46,15,-15,1,8,2,45,-84,-11,23,-16,3,-127,32,-33,-27,-12,6,-44,-17,15,27,31,-13,-36,-31,3,-14,12,22,18,-12,40,17, 
  /* [4][0][][] */ 23,1,-49,3,19,-11,19,-11,-52,5,1,27,8,-9,-17,17,-30,37,-16,-8,2,-127,-6,0,38,31,33,-45,42,-9,0,9,-10,51,31,-8,-18,17,-12,8,-11,-61,-87,21,35,37,2,-7, 
  /* [5][0][][] */ -3,52,82,5,6,24,21,-110,72,-40,-23,-13,107,-63,-6,13,25,-44,36,-1,-34,127,16,8,92,10,90,50,109,68,-7,-42,-76,-54,115,37,-53,-54,13,-107,18,-15,65,74,-60,-51,-35,-36, 
  /* [6][0][][] */ 60,-9,-22,19,45,-20,43,-45,50,40,-3,-30,-20,40,22,-76,23,-127,-16,-20,29,-18,-10,22,-46,-36,43,-20,57,-42,121,50,46,46,26,-49,-64,19,54,-32,-31,25,-75,59,34,6,43,-44, 
  /* [7][0][][] */ -12,48,46,58,-3,14,62,101,57,26,4,75,-60,-8,34,-16,86,-18,-30,-13,-6,-127,-3,-98,-75,76,58,18,4,29,19,-25,23,-22,18,26,-16,105,-103,-29,12,1,28,-13,-58,2,44,17, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0084172207862138748, 0.0065466398373246193, 0.0088017173111438751, 0.0059957532212138176, 0.0096166050061583519, 0.0035942238755524158, 0.0048462837003171444, 0.0051718722097575665, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 22075, 22690, 11159, 18490, 5560, 10980, 18212, 7041, 46228, -2900, -143, 19951, 14243, -3777, 9872, 742, 6320, 29120, 18006, 1469, 5450, -10708, 2132, 12, 37728, 33624, 814, 430, 1558, 15426, -1789, 1123, -15519, 19682, 27452, 25634, 29487, 21429, -297, -365, 6718, 38646, -243, 4890, -354, -1507, 21351, 9737, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 4.9912679969565943e-05, 8.7954438640736043e-05, 0.00010550536535447463, 6.2084553064778447e-05, 0.00011946191807510331, 9.9807439255528152e-05, 0.00012996303848922253, 0.0001129358061007224, 3.9543476304970682e-05, 6.9418216298799962e-05, 7.3490060458425432e-05, 5.1750201237155125e-05, 0.00017719664901960641, 5.8922480093315244e-05, 8.531923231203109e-05, 7.997360808076337e-05, 2.9867345801903866e-05, 7.3461720603518188e-05, 6.5247928432654589e-05, 0.00011707944213412702, 5.3613726777257398e-05, 0.00024997963919304311, 0.00011818102211691439, 9.1616748250089586e-05, 4.9797672545537353e-05, 6.7340974055696279e-05, 7.416397420456633e-05, 9.7109565103892237e-05, 4.7242516302503645e-05, 9.9826800578739494e-05, 0.00026832835283130407, 0.00021041982108727098, 7.2811693826224655e-05, 4.8656806029612198e-05, 9.5947747468017042e-05, 0.00012055227853124961, 8.078591781668365e-05, 0.00012447363405954093, 0.00016053060244303197, 9.7077936516143382e-05, 0.00015997485024854541, 3.6984903999837115e-05, 8.4702129242941737e-05, 4.1318035073345527e-05, 0.00035661569563671947, 0.0001104324619518593, 6.6097505623474717e-05, 8.0054363934323192e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -34,-76,-51,-54,-35,26,-48,-67,-55,56,46,-87,-37,22,-94,67,101,-81,-61,104,45,59,-72,103,-78,-55,57,63,61,-64,73,43,52,-69,-67,-28,-119,-56,124,63,-35,-6,33,67,93,104,-60,-40, -70,-105,-73,-102,-120,23,-86,-108,-64,109,75,-105,-56,66,-114,106,106,-103,-113,-13,83,84,86,118,-68,-85,104,84,90,-87,91,69,77,-102,-85,-54,-109,-81,126,79,-84,-52,66,86,111,113,-100,-86, -12,-39,-29,-61,-72,28,-65,-54,-36,58,50,-51,-20,66,-63,40,60,-36,-34,-60,65,-127,-73,52,-24,-35,42,15,50,-36,53,28,39,-57,-41,-24,-86,-38,14,37,-32,-24,44,56,61,65,-43,-27, 
  /* [0][1][][] */ -63,-98,-71,-77,-73,-18,-80,-66,-93,96,78,-98,-68,63,-127,79,127,-91,-80,117,80,86,-79,121,-112,-78,72,109,81,-89,84,81,72,-100,-107,-73,-119,-87,115,104,-82,-61,62,69,92,127,-70,-84, -127,-127,-127,-127,-127,-123,-127,-127,-127,127,127,-127,-127,127,-88,127,124,-127,-127,-67,127,90,127,127,-127,-127,127,127,127,-127,127,127,127,-127,-127,-127,-127,-127,127,127,-127,-127,127,127,127,118,-127,-127, -52,-34,-83,-86,-105,-110,-95,-70,-64,94,70,-76,-51,86,-66,51,99,-37,-53,-127,87,-127,-87,60,-35,-51,37,32,63,-71,57,59,64,-79,-63,-64,-92,-61,47,60,-59,-54,67,92,70,31,-56,-64, 
  /* [0][2][][] */ -27,-26,-41,-26,-65,-25,-44,-31,-43,74,30,-25,-25,12,-90,30,34,-24,-19,23,55,34,-46,47,-53,-25,16,38,32,-34,34,32,56,-79,-52,-49,-33,-32,8,47,-68,-43,36,28,43,31,-46,-18, -58,-22,-89,-49,-98,-127,-78,-49,-60,96,39,-54,-41,60,-85,37,53,-29,-34,-71,85,14,32,18,-56,-60,37,60,48,-71,54,54,84,-114,-71,-75,-49,-54,16,55,-95,-85,70,68,39,-3,-70,-39, -34,15,-53,-32,-48,-118,-69,-36,-18,82,25,-43,-6,41,5,9,55,-1,-26,-84,41,-50,-49,26,-12,-25,2,24,34,-43,19,37,35,-77,-46,-47,-26,-31,8,30,-77,-36,35,48,45,5,-29,-35, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0021212887950241566, 0.003738063620403409, 0.0044839777983725071, 0.0026385935489088297, 0.0050771315582096577, 0.004241816233843565, 0.0055234292522072792, 0.0047997715882956982, 0.0016805976629257202, 0.0029502741526812315, 0.003123327624052763, 0.0021993834525346756, 0.0075308573432266712, 0.0025042053312063217, 0.0036260674241930246, 0.0033988782670348883, 0.0012693621683865786, 0.0031221231911331415, 0.0027730369474738836, 0.0049758763052523136, 0.0022785833571106195, 0.010624133981764317, 0.0050226934254169464, 0.0038937116041779518, 0.0021164009813219309, 0.0028619912918657064, 0.0031519688200205564, 0.0041271564550697803, 0.0020078069064766169, 0.0042426390573382378, 0.011403954587876797, 0.0089428424835205078, 0.0030944969039410353, 0.0020679142326116562, 0.0040777791291475296, 0.0051234718412160873, 0.0034334014635533094, 0.0052901292219758034, 0.0068225506693124771, 0.0041258120909333229, 0.0067989309318363667, 0.001571858418174088, 0.0035998404491692781, 0.0017560163978487253, 0.01515616662800312, 0.0046933796256780624, 0.0028091438580304384, 0.00340231042355299, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 671, 3310, 2028, -354, -643, 413, 8111, 3083, 1806, -2357, 1646, -90, 4971, 95, 1128, -2206, -135, 4265, 967, 1199, -628, 25798, 1183, -1222, 1352, 4422, 2617, -1400, 159, 162, -2138, -1556, 3530, 751, 5898, 7596, 5346, 5797, -2967, -1374, -765, 1670, 1116, 638, -1839, -2300, 2592, 826, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00031752834911458194, 0.00021181970078032464, 0.00024549080990254879, 0.00034915169817395508, 0.0003449478535912931, 0.00021567236399278045, 0.00010546751582296565, 0.0001884292287286371, 0.00025664639542810619, 0.00021646943059749901, 0.00026432838058099151, 0.00032227247720584273, 0.00013509414566215128, 0.00044678113772533834, 0.00037849426735192537, 0.00017921871040016413, 0.00053548207506537437, 0.00015346429427154362, 0.00025302413268946111, 0.0003055057895835489, 0.00029236666159704328, 6.1800150433555245e-05, 0.00032464659307152033, 0.00019920518388971686, 0.00024969494552351534, 0.00017867484712041914, 0.00024014711380004883, 0.00028655823552981019, 0.00036866203299723566, 0.00040685775456950068, 0.0002123693993780762, 0.00020811414287891239, 0.00021235988242551684, 0.00036484590964391828, 0.00015702116070315242, 0.00013010340626351535, 0.00017450421000830829, 0.00014475804346147925, 0.00020246942585799843, 0.00021639562328346074, 0.00033610046375542879, 0.00030339561635628343, 0.0002645496279001236, 0.0003093662962783128, 0.00023533498460892588, 0.00021208522957749665, 0.00022198088117875159, 0.00021358722005970776, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -22,57,-49,46,38,127,28,32, 
  /* [1][0][][] */ 49,-127,-96,-29,-42,53,58,-35, 
  /* [2][0][][] */ -39,54,-41,-104,-44,-127,-27,-77, 
  /* [3][0][][] */ -11,127,61,28,2,-83,-31,29, 
  /* [4][0][][] */ -109,40,-127,77,10,-23,-47,-64, 
  /* [5][0][][] */ 85,-92,-127,32,1,-27,80,-48, 
  /* [6][0][][] */ -16,-97,-66,14,-127,-57,-54,92, 
  /* [7][0][][] */ -18,-50,-19,-48,49,-3,-31,127, 
  /* [8][0][][] */ 7,34,-103,-113,40,-31,-127,-91, 
  /* [9][0][][] */ -127,60,-9,109,-2,70,93,5, 
  /* [10][0][][] */ -23,-13,93,-127,-23,64,15,35, 
  /* [11][0][][] */ 104,-15,104,39,-44,49,88,127, 
  /* [12][0][][] */ 45,45,23,-48,55,111,97,-127, 
  /* [13][0][][] */ 38,57,-36,65,-11,-127,-42,56, 
  /* [14][0][][] */ 11,-127,-28,-30,10,67,32,-29, 
  /* [15][0][][] */ -108,-11,1,-79,57,127,-77,-22, 
  /* [16][0][][] */ 10,-44,126,9,-19,24,127,81, 
  /* [17][0][][] */ 66,21,54,27,-16,-80,-36,-127, 
  /* [18][0][][] */ -127,14,-74,-18,-16,-125,17,-83, 
  /* [19][0][][] */ 78,18,125,-18,-71,40,107,127, 
  /* [20][0][][] */ 17,127,48,-3,19,36,45,6, 
  /* [21][0][][] */ -33,32,21,-99,-60,127,-7,-15, 
  /* [22][0][][] */ 33,3,88,-6,-36,15,127,87, 
  /* [23][0][][] */ -65,127,63,53,-95,-95,-118,125, 
  /* [24][0][][] */ -24,-3,98,32,-117,127,-2,-107, 
  /* [25][0][][] */ -42,17,81,25,-127,50,-79,24, 
  /* [26][0][][] */ -49,-127,29,-45,9,41,-7,-15, 
  /* [27][0][][] */ -23,65,35,55,-23,127,-33,-12, 
  /* [28][0][][] */ 11,-127,54,23,61,123,43,35, 
  /* [29][0][][] */ 14,127,-23,31,-68,-55,-14,15, 
  /* [30][0][][] */ -46,70,106,93,-127,-70,-48,-113, 
  /* [31][0][][] */ 17,71,29,63,-53,-14,15,-127, 
  /* [32][0][][] */ -22,-29,-60,69,-127,-34,-51,4, 
  /* [33][0][][] */ 94,25,69,53,-32,58,53,127, 
  /* [34][0][][] */ 114,16,-127,-39,-57,-1,67,38, 
  /* [35][0][][] */ 127,99,102,-121,-49,-87,25,104, 
  /* [36][0][][] */ -42,-107,127,41,52,57,10,-36, 
  /* [37][0][][] */ -1,10,-26,0,-13,-57,-49,127, 
  /* [38][0][][] */ 127,-5,49,7,-5,15,-56,30, 
  /* [39][0][][] */ 53,89,-112,-127,-108,89,42,-58, 
  /* [40][0][][] */ -46,127,-40,69,-60,-28,-53,-17, 
  /* [41][0][][] */ -127,34,-23,-55,67,39,-2,-59, 
  /* [42][0][][] */ 46,-35,-2,-22,-22,127,10,84, 
  /* [43][0][][] */ -66,45,127,18,70,14,-36,4, 
  /* [44][0][][] */ 11,127,0,31,-51,-68,-19,1, 
  /* [45][0][][] */ -81,83,69,-127,-68,14,-62,-46, 
  /* [46][0][][] */ 44,-45,-20,21,30,2,-127,68, 
  /* [47][0][][] */ -86,-127,15,62,38,-83,5,84, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0035044495016336441, 0.0023377800825983286, 0.0027093964163213968, 0.0038534654304385185, 0.0038070690352469683, 0.0023803005460649729, 0.0011640081647783518, 0.0020796277094632387, 0.0028325167950242758, 0.002389097586274147, 0.0029172999784350395, 0.0035568089224398136, 0.0014909869059920311, 0.0049309674650430679, 0.0041773091070353985, 0.0019779743161052465, 0.0059099285863339901, 0.0016937318723648787, 0.0027925390750169754, 0.0033717607147991657, 0.0032267486676573753, 0.000682066660374403, 0.0035830112174153328, 0.0021985580679029226, 0.0027557960711419582, 0.0019719719421118498, 0.0026504199486225843, 0.0031626431737095118, 0.0040687941946089268, 0.0044903471134603024, 0.0023438469506800175, 0.0022968831472098827, 0.0023437419440597296, 0.004026676993817091, 0.0017329877009615302, 0.0014359058113768697, 0.0019259421387687325, 0.0015976439462974668, 0.0022345844190567732, 0.0023882829118520021, 0.0037094233557581902, 0.0033484715968370438, 0.0029197419062256813, 0.0034143677912652493, 0.0025973101146519184, 0.0023407107219099998, 0.0024499255232512951, 0.0023572875652462244, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 8053, -12111, 1516, 6253, 2206, -5589, 2572, 5334, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00020046418649144471, 0.00017686004866845906, 8.7057524069678038e-05, 0.0001646057644393295, 0.00025057076709344983, 0.00011268242815276608, 0.00019188493024557829, 8.1265920016448945e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -24,-3,-12,-31,-67,-13,-4,-21,62,10,7,-4,6,12,-19,4,-30,16,-21,-17,1,8,-25,1,17,-5,86,11,-18,-86,-18,12,-7,34,127,-14,-23,-46,27,-41,23,3,-8,-23,-20,0,-23,-92, 
  /* [1][0][][] */ 19,-28,-12,61,2,-8,18,40,68,79,41,-50,-54,68,1,6,-12,-30,17,-21,-64,36,-46,32,82,16,-26,36,30,-1,127,25,-18,-36,-30,1,-15,9,-25,-15,0,-20,6,21,-8,38,29,21, 
  /* [2][0][][] */ -67,-6,-84,112,-76,-73,20,-75,-82,38,52,-101,-20,-6,-44,-1,119,33,-80,-51,-79,-27,-42,19,77,-41,120,-7,88,-23,-65,19,10,-24,54,-4,-58,31,-10,-112,69,-77,-58,-127,-11,-74,-66,99, 
  /* [3][0][][] */ 23,-49,12,-43,30,-22,-8,-78,47,-64,5,-27,-82,-75,-15,8,8,-12,42,-39,-11,28,-81,2,72,-40,46,18,7,-3,0,-27,-37,35,19,-27,-56,30,-3,-6,127,16,-46,37,-50,48,-12,-52, 
  /* [4][0][][] */ 20,4,15,14,9,33,-6,-8,42,22,9,-43,0,6,-62,16,4,19,25,-18,-23,30,2,40,39,4,-29,7,44,-10,-17,26,-4,-5,29,19,-127,-2,54,14,10,-6,-2,16,-29,47,-26,-92, 
  /* [5][0][][] */ -37,-98,31,116,-24,1,-53,99,-99,78,50,29,-79,25,67,-43,-8,39,25,-3,-3,35,42,50,-50,17,-27,41,-45,-96,39,23,-106,-48,-27,1,127,-4,-27,17,-34,-15,82,101,24,43,46,48, 
  /* [6][0][][] */ 86,-1,-14,-12,81,-27,-29,-64,39,25,28,-27,-9,10,7,6,-4,-1,-12,-31,-33,15,19,24,54,-54,44,-4,-19,106,-19,8,43,27,-127,-15,-89,-31,21,-61,-9,-4,-2,-91,-2,2,-21,-10, 
  /* [7][0][][] */ -29,-78,53,-51,18,127,43,-45,-1,-94,-56,-5,1,-22,-56,5,15,-51,111,61,46,-39,13,3,-21,11,107,-14,51,22,12,2,-32,-22,-41,107,-124,99,-34,-31,-47,52,7,-67,21,-14,69,-31, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0085197277367115021, 0.0075165522284805775, 0.0036999448202550411, 0.0069957450032234192, 0.010649257339537144, 0.0047890031710267067, 0.0081551093608140945, 0.0034538013860583305, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 9315, 4443, -3, 7941, 395, -760, 5489, 170, 2757, 4831, -522, -253, -1958, 10733, 3198, -537, -5553, -546, -1979, -1008, 15534, 721, -14889, -294, -4723, 3169, 733, -35, -1387, -382, -3783, 1204, 17967, -1632, 1649, 1978, -1585, 3460, -796, 1402, 20364, -8, 4384, 4, -521, 344, -4601, 7529, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00022771261865273118, 0.00023909738229122013, 0.00020182633306831121, 0.00034068763488903642, 0.00040920768515206873, 0.00050651974743232131, 0.00011486628500279039, 0.00026900612283498049, 7.7087301178835332e-05, 0.00021281543013174087, 0.00036545813782140613, 0.00043940168689005077, 0.00023081044491846114, 0.00015817550593055785, 0.00014716584701091051, 0.00034898016019724309, 7.0309492002706975e-05, 0.0012966145295649767, 0.00042571921949274838, 0.00017302176274824888, 9.5655697805341333e-05, 0.00047210656339302659, 0.00010102354281116277, 0.00015906173211988062, 0.00032878172351047397, 0.00023662073363084346, 0.000341131875757128, 0.00036429206375032663, 0.00045116711407899857, 0.00022476074809674174, 0.0001680182758718729, 0.00049492728430777788, 5.8877129049506038e-05, 0.00031501089688390493, 0.00015470868675038218, 0.00067410623887553811, 0.00015874876407906413, 0.00023685753694735467, 0.00085881177801638842, 0.00041843517101369798, 4.9040358135243878e-05, 0.00033708565752021968, 0.0001654769730521366, 0.00014439855294767767, 0.00029509575688280165, 0.00028973686858080328, 0.00013461358321364969, 0.00037672551115974784, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -67,43,-49,-52,-9,-18,11,-19,-11,-13,7,39,-5,-98,-92,21,127,-3,57,43,-95,-64,106,-107,-9,-57,-8,99,-15,13,20,127,-32,-8,-17,-6,-12,-38,-8,19,106,-86,-59,41,86,-114,-26,-6, -12,-127,30,-127,-5,-23,-71,127,60,-75,23,39,13,-127,-127,10,-42,10,-29,-85,-84,1,80,127,17,-17,9,127,23,-6,1,-108,-105,27,-13,-32,127,-127,56,-8,-7,-118,-70,27,113,68,38,-36, -22,-5,12,-23,-5,33,10,61,-10,17,3,35,21,40,-90,30,59,11,-24,17,-127,44,66,30,-7,62,0,-40,-18,-3,-1,-39,-57,5,-4,-1,-20,118,-16,14,78,-50,6,-35,68,37,-40,-15, 
  /* [0][1][][] */ -31,-24,-127,-18,-31,23,-6,-1,19,-65,-2,-104,-28,-43,-122,118,108,7,127,94,-18,127,127,111,1,-64,-40,5,42,-39,28,-111,1,-23,-56,-8,-12,-107,46,20,81,127,-18,-17,-63,127,56,-36, -127,45,123,113,127,-122,-127,-12,-20,-127,-127,-127,127,-18,-22,31,4,-127,-94,-127,112,-13,-75,-105,127,-45,127,-54,127,127,-37,73,-127,-127,127,-127,85,-97,-127,-127,21,103,-103,12,-127,-75,127,127, -19,1,5,21,39,127,-27,51,61,13,53,-45,-13,-9,-71,-17,62,55,-1,63,-76,-122,122,-21,6,127,14,0,47,26,127,25,16,13,57,8,-23,80,53,-7,2,79,116,-16,-50,-57,54,-10, 
  /* [0][2][][] */ -27,2,-63,-12,-6,-15,19,-17,30,14,5,44,-1,-4,81,-5,24,5,62,16,-70,-6,69,25,-11,-63,-15,-70,-4,-17,-9,-40,-14,58,-11,-9,-70,-2,-8,6,21,-10,-46,-66,-18,11,-53,-40, -16,-49,43,-8,-84,-23,-77,-97,127,63,49,50,-5,-38,14,5,61,106,-29,-13,-103,1,22,-33,-5,-58,-71,-81,-19,-38,98,24,-70,54,-74,-12,21,-122,32,43,-127,-19,-127,127,30,-2,57,-53, 15,-14,12,-6,-44,23,18,-98,12,-7,-18,29,10,32,105,-127,32,-20,-18,-8,-87,3,19,-5,-8,25,-32,5,-5,-31,25,11,-19,52,-49,3,-95,84,-20,27,3,-21,28,50,-22,-16,-66,-25, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0096777863800525665, 0.010161638259887695, 0.0085776187479496002, 0.014479223638772964, 0.017391325905919075, 0.021527089178562164, 0.0048818169161677361, 0.011432760395109653, 0.0032762102782726288, 0.0090446555987000465, 0.015531971119344234, 0.018674571067094803, 0.0098094437271356583, 0.0067224591039121151, 0.0062545482069253922, 0.014831656590104103, 0.0029881533700972795, 0.055106114596128464, 0.018093066290020943, 0.0073534245602786541, 0.0040653669275343418, 0.020064529031515121, 0.0042935004457831383, 0.0067601236514747143, 0.01397322304546833, 0.010056381113827229, 0.014498104341328144, 0.015482412651181221, 0.019174601882696152, 0.0095523316413164139, 0.0071407766081392765, 0.02103441022336483, 0.002502277959138155, 0.013387962244451046, 0.006575118750333786, 0.02864951454102993, 0.006746822502464056, 0.010066444985568523, 0.036499500274658203, 0.017783494666218758, 0.0020842151716351509, 0.014326140284538269, 0.0070327711291611195, 0.006136938463896513, 0.012541568838059902, 0.012313816696405411, 0.0057210773229598999, 0.016010833904147148, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3407, 1155, 3717, 7759, 360, 5316, 1706, 1405, 2028, 4644, 2633, 5890, 2280, 2081, 3026, 76, 412, -2360, 5565, 2212, 1698, 6772, 7422, 442, 4015, 2802, 1277, -165, -1772, 922, 4832, 2067, 1067, 934, 817, -431, 847, 2348, 33, 1144, 1507, 5342, 2151, 658, 3213, 1213, -151, 10596, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00026448609423823655, 0.00043802754953503609, 0.00021318644576240331, 0.00014339784684125334, 0.0011962808202952147, 0.00014041874965187162, 0.00038132292684167624, 0.00042087316978722811, 0.00025919688050635159, 0.00016284894081763923, 0.00025447772350162268, 0.00011412938329158351, 0.00031599213252775371, 0.00020862514793407172, 0.00018267492123413831, 0.00027192439301870763, 0.00036719796480610967, 0.0003214414173271507, 0.00016904409858398139, 0.00045517750550061464, 0.00044015995808877051, 0.00012783968122676015, 0.00010968467540806159, 0.00038349156966432929, 0.00016049327678047121, 0.00035286758793517947, 0.00051629618974402547, 0.00025667628506198525, 0.00027321305242367089, 0.001016628579236567, 0.00018120072491001338, 0.00039329443825408816, 0.00056984811089932919, 0.00029280508169904351, 0.00078140216646715999, 0.00027660417254082859, 0.0002091069909511134, 0.00019463450007606298, 0.00022823215113021433, 0.00055674737086519599, 0.0002862138208001852, 0.00015652402362320572, 0.00019148158025927842, 0.00038994845817796886, 0.00017235521227121353, 0.00042524960008449852, 0.00042329571442678571, 9.1712492576334625e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -119,-15,24,-109,-124,127,4,-66, 
  /* [1][0][][] */ 81,2,21,-25,5,56,-127,43, 
  /* [2][0][][] */ -47,46,-89,91,-48,127,11,61, 
  /* [3][0][][] */ 102,-23,-33,76,-6,-67,11,127, 
  /* [4][0][][] */ -83,-7,-3,15,-23,-38,127,4, 
  /* [5][0][][] */ 52,118,26,51,-127,-50,11,-31, 
  /* [6][0][][] */ -7,-64,33,127,11,-97,-15,37, 
  /* [7][0][][] */ 127,2,100,-6,-73,25,74,123, 
  /* [8][0][][] */ -42,-127,44,48,84,-37,-23,6, 
  /* [9][0][][] */ -79,-111,15,-33,-27,1,-50,127, 
  /* [10][0][][] */ -37,-127,28,108,65,117,10,-25, 
  /* [11][0][][] */ -116,-107,25,-65,62,61,-45,127, 
  /* [12][0][][] */ 76,-21,79,-79,26,-127,81,2, 
  /* [13][0][][] */ 36,17,24,127,-14,13,34,-62, 
  /* [14][0][][] */ -37,-5,34,0,125,-14,-4,127, 
  /* [15][0][][] */ -66,127,44,83,45,93,-42,72, 
  /* [16][0][][] */ 8,-36,-64,-127,-65,67,25,52, 
  /* [17][0][][] */ 23,127,10,51,-25,-50,-9,18, 
  /* [18][0][][] */ 14,27,-12,-127,-42,-89,24,-13, 
  /* [19][0][][] */ 37,-74,-127,-110,-86,101,12,-7, 
  /* [20][0][][] */ 27,8,19,1,127,28,29,-36, 
  /* [21][0][][] */ -127,-85,-69,-89,56,49,46,-8, 
  /* [22][0][][] */ -69,-47,82,124,49,-47,-48,127, 
  /* [23][0][][] */ 22,34,-40,127,119,31,32,100, 
  /* [24][0][][] */ 127,5,-123,-15,0,-19,51,-55, 
  /* [25][0][][] */ 1,-8,-37,-21,69,-28,-127,-54, 
  /* [26][0][][] */ 127,6,102,-31,-90,47,58,110, 
  /* [27][0][][] */ 23,-49,-48,127,27,-10,-20,-111, 
  /* [28][0][][] */ -64,127,88,69,68,-19,-32,8, 
  /* [29][0][][] */ -3,-3,56,5,-75,0,127,67, 
  /* [30][0][][] */ -57,-65,51,-58,-75,127,58,44, 
  /* [31][0][][] */ 109,16,96,-30,-103,70,75,127, 
  /* [32][0][][] */ -110,-18,-32,32,-20,25,127,22, 
  /* [33][0][][] */ -124,127,52,72,31,22,-73,12, 
  /* [34][0][][] */ 111,5,26,-18,8,47,-127,19, 
  /* [35][0][][] */ 1,-1,21,32,-43,28,13,-127, 
  /* [36][0][][] */ 24,-3,-74,-119,47,-24,31,127, 
  /* [37][0][][] */ 46,-32,-36,-44,-19,28,60,-127, 
  /* [38][0][][] */ 34,127,19,106,-85,-105,-20,-29, 
  /* [39][0][][] */ 101,-8,117,-11,-90,39,127,126, 
  /* [40][0][][] */ -65,-75,127,106,-23,-27,-94,26, 
  /* [41][0][][] */ 23,-15,14,23,24,-79,-5,127, 
  /* [42][0][][] */ 62,-86,-83,-87,-59,78,36,-127, 
  /* [43][0][][] */ 90,-5,114,-34,-80,-22,113,127, 
  /* [44][0][][] */ -127,-85,-53,120,97,-24,-103,53, 
  /* [45][0][][] */ 127,-14,87,-29,-31,26,-2,74, 
  /* [46][0][][] */ 43,-110,9,73,127,-2,49,16, 
  /* [47][0][][] */ 77,127,-35,104,-46,-85,39,-85, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0030682433862239122, 0.0050814584828913212, 0.0024731277953833342, 0.0016635259380564094, 0.013877782970666885, 0.0016289660707116127, 0.0044236411340534687, 0.0048824544064700603, 0.0030068843625485897, 0.0018891737563535571, 0.0029521386604756117, 0.0013239891268312931, 0.0036657534074038267, 0.0024202130734920502, 0.0021191705018281937, 0.0031545332167297602, 0.004259780514985323, 0.0037289690226316452, 0.0019610424060374498, 0.0052804113365709782, 0.0051061962731182575, 0.0014830392319709063, 0.0012724271509796381, 0.0044487989507615566, 0.0018618461908772588, 0.0040935371071100235, 0.0059894351288676262, 0.0029776436276733875, 0.0031694828066974878, 0.011793677695095539, 0.0021020686253905296, 0.0045625199563801289, 0.0066106789745390415, 0.0033967655617743731, 0.0090648699551820755, 0.003208822337910533, 0.0024258028715848923, 0.0022579107899218798, 0.0026476695202291012, 0.00645870016887784, 0.0033203016500920057, 0.0018157997401431203, 0.0022213344927877188, 0.0045237038284540176, 0.0019994538743048906, 0.0049332245253026485, 0.004910557996481657, 0.001063935924321413, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 4734, 2625, 2450, 10287, 5470, 5868, 2475, -3077, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00013000892067793757, 0.00013207690790295601, 0.00014186141197569668, 0.00015639897901564837, 0.00012630285345949233, 0.0001127501018345356, 9.6359151939395815e-05, 0.00026857867487706244, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -29,39,-30,0,-45,-25,-82,25,8,18,35,39,37,6,-44,11,-43,44,12,-61,29,43,-127,4,-8,9,-29,47,-8,-8,23,21,15,-24,35,18,0,105,-68,-19,-13,19,-31,31,4,6,20,-4, 
  /* [1][0][][] */ -76,-102,-56,6,89,-24,-127,63,-23,-42,-7,-79,-19,81,3,-10,120,-126,-10,-24,-61,0,1,-16,21,-12,-28,-53,23,-15,-121,-24,29,-59,-85,-100,43,12,-91,-2,1,40,11,76,-14,8,7,48, 
  /* [2][0][][] */ 9,-69,12,60,115,17,101,-7,-33,-29,-11,-48,4,-25,12,35,-30,-91,45,-65,5,-71,-64,12,-69,59,72,-97,-41,-2,-56,-50,20,5,-71,-46,-6,127,81,-37,-12,9,-28,-75,47,36,51,-23, 
  /* [3][0][][] */ 9,-1,21,-18,32,25,23,-90,25,16,-11,5,1,-110,-12,0,-31,6,-20,-4,-7,52,-127,6,13,-97,39,26,46,-16,-26,57,0,9,-4,-37,-96,-42,9,-13,-9,-1,40,5,-17,2,-2,-51, 
  /* [4][0][][] */ 32,-56,7,69,52,8,-31,-6,-38,-12,23,-33,72,34,-17,30,-44,-62,64,36,35,-48,127,23,-29,13,-56,-15,-8,13,-80,-39,80,-27,-42,-62,-46,-45,-25,1,-62,95,1,-8,55,81,41,23, 
  /* [5][0][][] */ -63,-20,-35,53,-4,8,-2,-49,-59,-37,-1,-20,14,40,-74,15,127,-16,54,-79,26,-97,-11,-4,86,-115,-99,-10,51,-45,29,-78,13,-58,-35,26,-77,-18,18,-34,-45,27,93,44,41,18,28,-37, 
  /* [6][0][][] */ -32,4,-37,36,-25,76,-71,9,-19,2,-127,8,47,35,116,21,20,8,42,-13,38,-17,-48,-13,11,2,-72,16,2,-51,9,-23,34,-43,6,7,-2,-8,-54,-23,-33,44,-25,30,31,30,32,0, 
  /* [7][0][][] */ 31,-4,41,-17,4,8,14,-11,15,5,-7,-1,-10,-7,-4,-12,12,-3,-24,-21,-21,13,127,15,8,-13,-1,9,6,-10,-22,13,-1,21,1,-18,-9,15,7,27,4,-2,11,-2,-16,-2,-22,16, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0055253789760172367, 0.0056132683530449867, 0.0060291099362075329, 0.0066469567827880383, 0.0053678709082305431, 0.0047918790951371193, 0.0040952637791633606, 0.011414593085646629, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 5540, 267, -1066, -453, 7485, 1461, 930, 2579, 4110, -249, 1152, 1568, 750, -188, -1321, 318, 11485, 1135, 182, 36477, -1585, 16218, 126, -603, -122, -8383, 8988, -218, 391, -208, 773, 7994, 436, 326, 1718, 665, 7658, -1424, 2636, -1284, 409, 242, 19639, -8561, 647, -100, 318, -873, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 5.5803382565500215e-05, 0.00018072006059810519, 0.0011966389138251543, 0.00098001980222761631, 0.00012718193465843797, 0.00016735291865188628, 7.4834460974670947e-05, 0.00041381389019079506, 0.00013979896903038025, 0.00045626808423548937, 4.8434845666633919e-05, 0.00063342571957036853, 0.00075974297942593694, 0.00016800219600554556, 0.00014099624240770936, 0.0081345038488507271, 0.00017080351244658232, 0.00017250078963115811, 0.00043292759801261127, 9.2686845164280385e-05, 0.0005976147367618978, 9.1973219241481274e-05, 0.00028438732260838151, 9.7697986348066479e-05, 0.0001398390595568344, 0.0007427530363202095, 0.00011955617083003744, 0.00033503343001939356, 0.00092986546223983169, 0.00059090676950290799, 0.00014759386249352247, 9.3724578619003296e-05, 0.00097756495233625174, 0.00048166979104280472, 0.00016848261293489486, 0.00022655307839158922, 0.00015014063683338463, 6.3769570260774344e-05, 9.5589770353399217e-05, 0.00022873493435326964, 0.00041176620288752019, 0.00039701716741546988, 7.8304467024281621e-05, 0.00016012755804695189, 0.0008526790770702064, 0.00060205283807590604, 0.005923460703343153, 0.00050581572577357292, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 110,-38,-69,-94,27,-100,77,-44,69,20,92,43,-100,68,52,-119,62,-102,-2,-44,-127,-54,37,109,-1,69,-6,64,-127,-30,90,-90,-48,-65,49,78,-127,45,116,82,-47,-127,-69,43,-73,-28,4,-80, 84,-58,84,127,90,41,126,-126,-79,93,57,64,-4,60,60,112,63,-101,-106,-55,100,-96,52,5,122,127,-33,78,8,49,82,-48,46,113,127,127,-93,43,69,-22,82,25,-45,111,127,114,-7,-8, 26,-27,5,-37,42,59,29,-97,-16,43,-86,29,88,-10,-61,-1,21,-38,92,-23,45,-4,-83,-86,27,7,-4,28,35,74,36,10,-6,-48,28,29,-22,13,20,-56,-53,105,11,78,-61,-73,-3,80, 
  /* [0][1][][] */ 127,66,-127,20,-78,-127,81,-52,102,-71,127,-97,90,97,127,119,-49,113,-10,-91,127,-83,49,127,-11,-4,-31,18,-58,86,68,-127,-127,-75,-24,33,-19,102,127,127,-49,-83,-127,55,-3,-24,-127,-127, 125,127,123,-17,-127,17,127,-127,-127,-127,86,-127,36,127,103,-127,-44,127,127,-127,-65,-127,73,-32,67,10,-127,70,11,127,127,-107,118,127,-36,12,-25,127,91,-38,127,-10,-54,127,-12,127,118,47, 27,50,4,14,-27,84,35,-92,-9,-92,-87,-73,-127,-13,-69,1,24,31,-104,-59,-47,-17,-127,-99,-38,4,-72,23,45,76,30,8,7,-64,-14,1,-6,36,23,-77,-57,90,-12,93,8,-83,2,99, 
  /* [0][2][][] */ 44,-42,-27,-5,49,-21,6,-4,75,25,29,39,2,46,-9,-16,-127,-31,-8,-21,20,-37,11,46,82,-18,-16,-95,21,48,-9,-78,-28,-40,-73,-7,73,25,38,72,-94,-59,-116,43,-1,-7,89,-64, 17,-61,8,-2,42,8,33,-44,-91,66,1,54,-24,55,-2,10,-97,-28,-15,-52,-25,-76,29,-6,127,-14,-50,-127,20,70,1,-57,27,82,-65,10,79,47,13,-25,-53,-3,-56,95,-8,-12,-99,61, -2,-30,26,7,13,26,10,-21,-10,53,-34,25,15,-28,-15,0,13,-8,17,-43,16,-1,-41,-48,-16,-9,-16,-40,18,59,-8,16,-4,-38,-45,-3,64,24,6,-43,-93,52,-25,50,5,0,4,14, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0023716436699032784, 0.0076806023716926575, 0.050857152789831161, 0.041650839149951935, 0.0054052318446338177, 0.0071124988608062267, 0.0031804644968360662, 0.017587089911103249, 0.0059414561837911606, 0.019391393288969994, 0.002058480866253376, 0.026920592412352562, 0.032289076596498489, 0.0071400934830307961, 0.0059923399239778519, 0.34571641683578491, 0.0072591491043567657, 0.0073312832973897457, 0.018399422988295555, 0.0039391908794641495, 0.025398625060915947, 0.0039088618941605091, 0.012086460366845131, 0.0041521643288433552, 0.0059431600384414196, 0.031567003577947617, 0.0050811371766030788, 0.014238920994102955, 0.039519280195236206, 0.025113537907600403, 0.006272739265114069, 0.0039832945913076401, 0.04154650866985321, 0.020470965653657913, 0.0071605108678340912, 0.0096285054460167885, 0.0063809766434133053, 0.0027102066669613123, 0.0040625650435686111, 0.0097212344408035278, 0.01750006340444088, 0.016873229295015335, 0.0033279396593570709, 0.0068054213188588619, 0.036238860338926315, 0.02558724582195282, 0.25174707174301147, 0.021497167646884918, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { -388, -8604, 11228, 4027, 11126, 3271, 3444, 453, -1970, -7843, 717, 5013, 20220, -13156, 94, 8522, -7327, -1517, 2311, 9881, 8777, 3109, 541, 518, 12128, 26268, 10900, -11987, 2475, -1221, -131, -3661, 20150, 8706, 11711, -1877, -12056, 206, -3970, 327, -13415, -10492, -2187, 2594, 7475, -12382, 20706, -1433, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00028252319316379726, 0.00027384946588426828, 8.1413236330263317e-05, 0.0002579830470494926, 0.00027910358039662242, 0.00071943498915061355, 0.00091624475317075849, 0.00054956268286332488, 0.00059939682250842452, 0.00035141917760483921, 0.0013994835317134857, 0.00025927630485966802, 7.1976413892116398e-05, 0.00032255882979370654, 0.00047160402755253017, 3.9717910112813115e-05, 0.00025421546888537705, 0.0004097188648302108, 0.00032762243063189089, 0.0001529629371361807, 0.00013956670591142029, 0.0013039216864854097, 0.00042245272197760642, 0.00060478254454210401, 0.00021776658832095563, 7.7051467087585479e-05, 0.00036891928175464272, 0.00028419547015801072, 0.0010183010017499328, 0.00037468710797838867, 0.00094040308613330126, 0.0012704728869721293, 0.00011368349078111351, 0.00024217893951572478, 0.00028965176898054779, 0.00077957997564226389, 0.00037803110899403691, 0.00036217499291524291, 0.00099652516655623913, 0.00032817351166158915, 0.00030653621070086956, 0.00024021411081776023, 0.0002963595325127244, 0.00033049707417376339, 0.00013768760254606605, 0.00025953352451324463, 1.7966445739148185e-05, 0.0005229286034591496, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 11,51,2,-15,94,-28,127,-10, 
  /* [1][0][][] */ 113,82,74,6,-9,-47,0,127, 
  /* [2][0][][] */ -63,12,-3,127,5,-19,-40,62, 
  /* [3][0][][] */ 51,-37,-127,-3,-4,-41,20,124, 
  /* [4][0][][] */ -112,82,-127,-10,17,26,-40,-45, 
  /* [5][0][][] */ 125,-16,-7,-46,-2,-30,9,-127, 
  /* [6][0][][] */ 8,-5,-6,3,-127,-31,60,0, 
  /* [7][0][][] */ -4,-59,-3,3,-25,0,-127,-3, 
  /* [8][0][][] */ -8,26,36,-8,127,19,-63,-17, 
  /* [9][0][][] */ 127,-43,24,5,0,-26,46,104, 
  /* [10][0][][] */ 127,8,-6,-37,-2,8,-1,-123, 
  /* [11][0][][] */ -53,2,-5,127,-4,-44,-35,32, 
  /* [12][0][][] */ -127,-3,-83,-19,18,114,-56,-124, 
  /* [13][0][][] */ 121,10,127,12,-9,26,25,47, 
  /* [14][0][][] */ -126,-7,16,13,0,-13,4,127, 
  /* [15][0][][] */ -127,8,-2,124,5,-3,-16,122, 
  /* [16][0][][] */ 51,-74,127,62,-13,-109,31,70, 
  /* [17][0][][] */ 20,-56,-76,127,5,23,-5,122, 
  /* [18][0][][] */ 22,-28,-117,42,-14,-3,33,127, 
  /* [19][0][][] */ 28,14,-10,127,-8,4,-72,-48, 
  /* [20][0][][] */ 15,50,120,-125,6,-68,8,-127, 
  /* [21][0][][] */ 4,-2,-7,-1,-127,-11,56,3, 
  /* [22][0][][] */ 3,55,-4,-9,2,127,-12,-2, 
  /* [23][0][][] */ 121,25,-6,96,-4,-2,-46,-127, 
  /* [24][0][][] */ -127,28,-88,-39,25,-48,-44,-59, 
  /* [25][0][][] */ -51,-7,-58,-49,6,-127,9,-41, 
  /* [26][0][][] */ -106,-26,-127,7,8,6,-22,-31, 
  /* [27][0][][] */ 92,2,127,17,-6,43,15,45, 
  /* [28][0][][] */ 5,-61,-21,37,28,-127,2,13, 
  /* [29][0][][] */ -8,-8,26,-127,-18,-5,19,-1, 
  /* [30][0][][] */ -45,3,127,-7,-2,6,-8,-111, 
  /* [31][0][][] */ 0,11,3,-2,127,27,-51,1, 
  /* [32][0][][] */ -127,-19,-113,-10,-2,-30,-24,-65, 
  /* [33][0][][] */ 12,-57,8,-36,37,-127,14,-17, 
  /* [34][0][][] */ -48,-113,-127,73,-1,-57,-10,-24, 
  /* [35][0][][] */ 53,3,-108,-3,2,1,8,127, 
  /* [36][0][][] */ 69,38,83,30,3,127,12,34, 
  /* [37][0][][] */ -8,19,-3,127,8,-19,-14,11, 
  /* [38][0][][] */ 4,23,7,3,127,26,-39,-4, 
  /* [39][0][][] */ -6,17,-16,23,-36,127,-101,-11, 
  /* [40][0][][] */ 127,-18,121,20,-24,28,13,61, 
  /* [41][0][][] */ 117,-3,127,17,-4,8,36,47, 
  /* [42][0][][] */ 58,-71,-8,-43,33,127,26,-23, 
  /* [43][0][][] */ -7,-66,-5,2,-45,-14,-127,5, 
  /* [44][0][][] */ -21,-127,34,94,13,42,11,-118, 
  /* [45][0][][] */ 120,10,127,-4,-8,32,26,45, 
  /* [46][0][][] */ -87,16,3,127,6,5,-39,72, 
  /* [47][0][][] */ -3,51,-13,-1,-1,127,-17,-2, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0032094479538500309, 0.0031109149567782879, 0.00092484988272190094, 0.0029306730721145868, 0.003170601325109601, 0.0081727420911192894, 0.010408489964902401, 0.0062430016696453094, 0.0068091149441897869, 0.003992102574557066, 0.015898056328296661, 0.002945364685729146, 0.00081764813512563705, 0.0036642507184296846, 0.0053573958575725555, 0.00045119327842257917, 0.0028878739103674889, 0.0046543837524950504, 0.0037217726930975914, 0.0017376504838466644, 0.0015854701632633805, 0.014812478795647621, 0.0047990395687520504, 0.0068702963180840015, 0.0024738165084272623, 0.00087530043674632907, 0.004190902691334486, 0.0032284450717270374, 0.011567843146622181, 0.0042564249597489834, 0.010682927444577217, 0.01443250197917223, 0.0012914382386952639, 0.0027511394582688808, 0.003290428314357996, 0.0088559854775667191, 0.0042944126762449741, 0.004114287905395031, 0.01132047176361084, 0.0037280330434441566, 0.0034822344314306974, 0.0027288191486150026, 0.0033666279632598162, 0.0037544285878539085, 0.0015641236677765846, 0.0029482867103070021, 0.00020409784337971359, 0.0059404401108622551, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 1281, 1873, -703, -8629, 452, -1248, -452, 3942, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00021533609833568335, 0.00024534578551538289, 0.00034147093538194895, 0.00018908386118710041, 0.00023426527332048863, 0.00011865547276102006, 0.00031788996420800686, 0.00019239161338191479, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -12,-12,-22,14,-8,-127,9,40, 
  /* [1][0][][] */ -64,22,-127,114,8,62,-23,34, 
  /* [2][0][][] */ 7,-10,24,-4,-7,-127,11,24, 
  /* [3][0][][] */ 21,52,54,127,15,-43,-44,-14, 
  /* [4][0][][] */ 15,54,22,-20,-127,-8,24,-7, 
  /* [5][0][][] */ 56,-26,127,-100,19,-58,-11,-50, 
  /* [6][0][][] */ 31,127,44,-40,37,-9,-64,-20, 
  /* [7][0][][] */ -19,-27,-41,-18,-14,-127,22,44, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0091517837718129158, 0.010427195578813553, 0.014512514695525169, 0.0080360639840364456, 0.0099562741816043854, 0.0050428574904799461, 0.013510323129594326, 0.0081766434013843536, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { 9780, -4, -197, 1336, 12502, -194, 833, -1396, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00010355692211305723, 0.00042886770097538829, 0.00016986089758574963, 0.00054178724531084299, 0.00017489104357082397, 0.0002756766916718334, 0.00061750155873596668, 0.00010744677274487913, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -23,-4,5,-1,-2,29,-5,-7, 12,0,4,-7,9,127,10,127, 5,0,7,-8,-1,16,1,4, 
  /* [0][1][][] */ 3,-127,-6,4,-16,-4,-116,-7, -127,101,-79,127,-127,-8,127,-33, 11,-1,-1,-64,-6,2,47,-23, 
  /* [0][2][][] */ 14,-2,2,-3,-2,-21,0,-5, 55,-1,127,-20,12,-113,-2,15, 8,0,-4,-7,-2,-21,-8,-2, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0044011692516505718, 0.018226876854896545, 0.0072190877981483936, 0.023025957867503166, 0.0074328691698610783, 0.011716258712112904, 0.026243815198540688, 0.0045664878562092781, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 57582, 2398, 43930, 45595, 15140, 550239, 13740, 48228, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 5.4412139434134588e-05, 4.0810100472299382e-05, 8.3725812146440148e-05, 1.5961302779032849e-05, 0.00011455990897957236, 6.468140782089904e-06, 8.2416472650947981e-06, 6.7390217736829072e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 8,-2,14, 7,-24,30, 10,-24,21, 
  /* [0][1][][] */ 38,30,28, 64,18,59, 22,-34,38, 
  /* [0][2][][] */ -22,-91,-12, -31,-127,-1, -9,-56,17, 
  /* [1][0][][] */ 29,73,25, 5,7,-2, -31,-70,-26, 
  /* [1][1][][] */ 51,118,39, 2,-2,-2, -54,-127,-38, 
  /* [1][2][][] */ 28,43,12, 4,-3,1, -32,-54,-2, 
  /* [2][0][][] */ 44,93,11, 54,127,12, 17,43,-1, 
  /* [2][1][][] */ -47,-83,-28, -81,-94,-39, -30,-6,-21, 
  /* [2][2][][] */ 1,11,7, 5,17,0, 1,12,-6, 
  /* [3][0][][] */ 46,-31,-15, 78,-34,-36, 30,-17,-12, 
  /* [3][1][][] */ 80,-55,-35, 127,-52,-70, 59,-28,-28, 
  /* [3][2][][] */ 20,-22,-4, 42,-28,-14, 16,-12,-1, 
  /* [4][0][][] */ -12,-23,-4, 27,45,9, -15,-28,-4, 
  /* [4][1][][] */ -28,-59,-9, 64,127,19, -34,-61,-8, 
  /* [4][2][][] */ -9,-13,3, 21,25,-3, -12,-13,-3, 
  /* [5][0][][] */ -26,-62,-34, -46,-89,-53, -35,-35,-26, 
  /* [5][1][][] */ -51,-103,-46, -75,-127,-62, -41,-41,-32, 
  /* [5][2][][] */ 5,5,-11, 4,-5,-10, 4,6,-3, 
  /* [6][0][][] */ -98,-2,38, 6,25,-10, 71,22,-16, 
  /* [6][1][][] */ -127,-32,47, 17,25,-24, 114,21,-29, 
  /* [6][2][][] */ -49,-10,20, 19,-3,2, 38,-10,34, 
  /* [7][0][][] */ -6,15,-3, -16,22,-7, -7,22,-7, 
  /* [7][1][][] */ 16,83,-7, 22,127,-22, -3,61,-27, 
  /* [7][2][][] */ -29,-51,-20, -43,-52,-32, -20,5,-19, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.013875095173716545, 0.010406575165688992, 0.021350080147385597, 0.0040701320394873619, 0.029212774708867073, 0.0016493757721036673, 0.0021016199607402086, 0.017184505239129066, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.092510879039764404, } };
const TfArray<1, int> quant46_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.088028594851493835, } };
const TfArray<1, int> quant47_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.086201146245002747, } };
const TfArray<1, int> quant51_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.069594621658325195, } };
const TfArray<1, int> quant54_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.090607196092605591, } };
const TfArray<1, int> quant55_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.064716748893260956, } };
const TfArray<1, int> quant59_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.032449118793010712, } };
const TfArray<1, int> quant62_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.067693755030632019, } };
const TfArray<1, int> quant63_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023374432697892189, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.052574094384908676, } };
const TfArray<1, int> quant66_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.085736282169818878, } };
const TfArray<1, int> quant67_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.042313974350690842, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.045161720365285873, } };
const TfArray<1, int> quant70_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
